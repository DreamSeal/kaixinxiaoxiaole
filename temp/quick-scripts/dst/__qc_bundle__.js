
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__qc_index__.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}
require('./assets/Script/Controller/GameController');
require('./assets/Script/Controller/LoginController');
require('./assets/Script/Model/CellModel');
require('./assets/Script/Model/ConstValue');
require('./assets/Script/Model/GameModel');
require('./assets/Script/UnitTest/GameModelTest');
require('./assets/Script/Utils/AudioUtils');
require('./assets/Script/View/CellView');
require('./assets/Script/View/EffectLayer');
require('./assets/Script/View/GridView');
require('./assets/migration/use_v2.0.x_cc.Toggle_event');

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/migration/use_v2.0.x_cc.Toggle_event.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '2d45aULBqZCsbAcd/4liKXF', 'use_v2.0.x_cc.Toggle_event');
// migration/use_v2.0.x_cc.Toggle_event.js

"use strict";

/*
 * This script is automatically generated by Cocos Creator and is only compatible with projects prior to v2.1.0.
 * You do not need to manually add this script in any other project.
 * If you don't use cc.Toggle in your project, you can delete this script directly.
 * If your project is hosted in VCS such as git, submit this script together.
 *
 * 此脚本由 Cocos Creator 自动生成，仅用于兼容 v2.1.0 之前版本的工程，
 * 你无需在任何其它项目中手动添加此脚本。
 * 如果你的项目中没用到 Toggle，可直接删除该脚本。
 * 如果你的项目有托管于 git 等版本库，请将此脚本一并上传。
 */
if (cc.Toggle) {
  // Whether the 'toggle' and 'checkEvents' events are fired when 'toggle.check() / toggle.uncheck()' is called in the code
  // 在代码中调用 'toggle.check() / toggle.uncheck()' 时是否触发 'toggle' 与 'checkEvents' 事件
  cc.Toggle._triggerEventInScript_check = true;
}

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9taWdyYXRpb24vdXNlX3YyLjAueF9jYy5Ub2dnbGVfZXZlbnQuanMiXSwibmFtZXMiOlsiY2MiLCJUb2dnbGUiLCJfdHJpZ2dlckV2ZW50SW5TY3JpcHRfY2hlY2siXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7O0FBWUEsSUFBSUEsRUFBRSxDQUFDQyxNQUFQLEVBQWU7QUFDWDtBQUNBO0FBQ0FELEVBQUFBLEVBQUUsQ0FBQ0MsTUFBSCxDQUFVQywyQkFBVixHQUF3QyxJQUF4QztBQUNIIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogVGhpcyBzY3JpcHQgaXMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgYnkgQ29jb3MgQ3JlYXRvciBhbmQgaXMgb25seSBjb21wYXRpYmxlIHdpdGggcHJvamVjdHMgcHJpb3IgdG8gdjIuMS4wLlxuICogWW91IGRvIG5vdCBuZWVkIHRvIG1hbnVhbGx5IGFkZCB0aGlzIHNjcmlwdCBpbiBhbnkgb3RoZXIgcHJvamVjdC5cbiAqIElmIHlvdSBkb24ndCB1c2UgY2MuVG9nZ2xlIGluIHlvdXIgcHJvamVjdCwgeW91IGNhbiBkZWxldGUgdGhpcyBzY3JpcHQgZGlyZWN0bHkuXG4gKiBJZiB5b3VyIHByb2plY3QgaXMgaG9zdGVkIGluIFZDUyBzdWNoIGFzIGdpdCwgc3VibWl0IHRoaXMgc2NyaXB0IHRvZ2V0aGVyLlxuICpcbiAqIOatpOiEmuacrOeUsSBDb2NvcyBDcmVhdG9yIOiHquWKqOeUn+aIkO+8jOS7heeUqOS6juWFvOWuuSB2Mi4xLjAg5LmL5YmN54mI5pys55qE5bel56iL77yMXG4gKiDkvaDml6DpnIDlnKjku7vkvZXlhbblroPpobnnm67kuK3miYvliqjmt7vliqDmraTohJrmnKzjgIJcbiAqIOWmguaenOS9oOeahOmhueebruS4reayoeeUqOWIsCBUb2dnbGXvvIzlj6/nm7TmjqXliKDpmaTor6XohJrmnKzjgIJcbiAqIOWmguaenOS9oOeahOmhueebruacieaJmOeuoeS6jiBnaXQg562J54mI5pys5bqT77yM6K+35bCG5q2k6ISa5pys5LiA5bm25LiK5Lyg44CCXG4gKi9cblxuaWYgKGNjLlRvZ2dsZSkge1xuICAgIC8vIFdoZXRoZXIgdGhlICd0b2dnbGUnIGFuZCAnY2hlY2tFdmVudHMnIGV2ZW50cyBhcmUgZmlyZWQgd2hlbiAndG9nZ2xlLmNoZWNrKCkgLyB0b2dnbGUudW5jaGVjaygpJyBpcyBjYWxsZWQgaW4gdGhlIGNvZGVcbiAgICAvLyDlnKjku6PnoIHkuK3osIPnlKggJ3RvZ2dsZS5jaGVjaygpIC8gdG9nZ2xlLnVuY2hlY2soKScg5pe25piv5ZCm6Kem5Y+RICd0b2dnbGUnIOS4jiAnY2hlY2tFdmVudHMnIOS6i+S7tlxuICAgIGNjLlRvZ2dsZS5fdHJpZ2dlckV2ZW50SW5TY3JpcHRfY2hlY2sgPSB0cnVlO1xufVxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Model/GameModel.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'cc442HaMlBE/ZKi7W/YUKwd', 'GameModel');
// Script/Model/GameModel.js

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _CellModel = _interopRequireDefault(require("./CellModel"));

var _ConstValue = require("./ConstValue");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var GameModel = /*#__PURE__*/function () {
  function GameModel() {
    _classCallCheck(this, GameModel);

    this.cells = null;
    this.cellBgs = null;
    this.lastPos = cc.v2(-1, -1);
    this.cellTypeNum = 5;
    this.cellCreateType = []; // 升成种类只在这个数组里面查找
  }

  _createClass(GameModel, [{
    key: "init",
    value: function init(cellTypeNum) {
      this.cells = [];
      this.setCellTypeNum(cellTypeNum || this.cellTypeNum);

      for (var i = 1; i <= _ConstValue.GRID_WIDTH; i++) {
        this.cells[i] = [];

        for (var j = 1; j <= _ConstValue.GRID_HEIGHT; j++) {
          this.cells[i][j] = new _CellModel["default"]();
        }
      }

      for (var i = 1; i <= _ConstValue.GRID_WIDTH; i++) {
        for (var j = 1; j <= _ConstValue.GRID_HEIGHT; j++) {
          var flag = true;

          while (flag) {
            flag = false;
            this.cells[i][j].init(this.getRandomCellType());
            var result = this.checkPoint(j, i)[0];

            if (result.length > 2) {
              flag = true;
            }

            this.cells[i][j].setXY(j, i);
            this.cells[i][j].setStartXY(j, i);
          }
        }
      }
    }
  }, {
    key: "initWithData",
    value: function initWithData(data) {// to do
    }
  }, {
    key: "checkPoint",
    value: function checkPoint(x, y) {
      var checkWithDirection = function checkWithDirection(x, y, direction) {
        var queue = [];
        var vis = [];
        vis[x + y * 9] = true;
        queue.push(cc.v2(x, y));
        var front = 0;

        while (front < queue.length) {
          //let direction = [cc.v2(0, -1), cc.v2(0, 1), cc.v2(1, 0), cc.v2(-1, 0)];
          var point = queue[front];
          var cellModel = this.cells[point.y][point.x];
          front++;

          if (!cellModel) {
            continue;
          }

          for (var i = 0; i < direction.length; i++) {
            var tmpX = point.x + direction[i].x;
            var tmpY = point.y + direction[i].y;

            if (tmpX < 1 || tmpX > 9 || tmpY < 1 || tmpY > 9 || vis[tmpX + tmpY * 9] || !this.cells[tmpY][tmpX]) {
              continue;
            }

            if (cellModel.type == this.cells[tmpY][tmpX].type) {
              vis[tmpX + tmpY * 9] = true;
              queue.push(cc.v2(tmpX, tmpY));
            }
          }
        }

        return queue;
      };

      var rowResult = checkWithDirection.call(this, x, y, [cc.v2(1, 0), cc.v2(-1, 0)]);
      var colResult = checkWithDirection.call(this, x, y, [cc.v2(0, -1), cc.v2(0, 1)]);
      var result = [];
      var newCellStatus = "";

      if (rowResult.length >= 5 || colResult.length >= 5) {
        newCellStatus = _ConstValue.CELL_STATUS.BIRD;
      } else if (rowResult.length >= 3 && colResult.length >= 3) {
        newCellStatus = _ConstValue.CELL_STATUS.WRAP;
      } else if (rowResult.length >= 4) {
        newCellStatus = _ConstValue.CELL_STATUS.LINE;
      } else if (colResult.length >= 4) {
        newCellStatus = _ConstValue.CELL_STATUS.COLUMN;
      }

      if (rowResult.length >= 3) {
        result = rowResult;
      }

      if (colResult.length >= 3) {
        var tmp = result.concat();
        colResult.forEach(function (newEle) {
          var flag = false;
          tmp.forEach(function (oldEle) {
            if (newEle.x == oldEle.x && newEle.y == oldEle.y) {
              flag = true;
            }
          }, this);

          if (!flag) {
            result.push(newEle);
          }
        }, this);
      }

      return [result, newCellStatus, this.cells[y][x].type];
    }
  }, {
    key: "printInfo",
    value: function printInfo() {
      for (var i = 1; i <= 9; i++) {
        var printStr = "";

        for (var j = 1; j <= 9; j++) {
          printStr += this.cells[i][j].type + " ";
        }

        console.log(printStr);
      }
    }
  }, {
    key: "getCells",
    value: function getCells() {
      return this.cells;
    } // controller调用的主要入口
    // 点击某个格子

  }, {
    key: "selectCell",
    value: function selectCell(pos) {
      this.changeModels = []; // 发生改变的model，将作为返回值，给view播动作

      this.effectsQueue = []; // 动物消失，爆炸等特效

      var lastPos = this.lastPos;
      var delta = Math.abs(pos.x - lastPos.x) + Math.abs(pos.y - lastPos.y);

      if (delta != 1) {
        //非相邻格子， 直接返回
        this.lastPos = pos;
        return [[], []];
      }

      var curClickCell = this.cells[pos.y][pos.x]; //当前点击的格子

      var lastClickCell = this.cells[lastPos.y][lastPos.x]; // 上一次点击的格式

      this.exchangeCell(lastPos, pos);
      var result1 = this.checkPoint(pos.x, pos.y)[0];
      var result2 = this.checkPoint(lastPos.x, lastPos.y)[0];
      this.curTime = 0; // 动画播放的当前时间

      this.pushToChangeModels(curClickCell);
      this.pushToChangeModels(lastClickCell);
      var isCanBomb = curClickCell.status != _ConstValue.CELL_STATUS.COMMON && // 判断两个是否是特殊的动物
      lastClickCell.status != _ConstValue.CELL_STATUS.COMMON || curClickCell.status == _ConstValue.CELL_STATUS.BIRD || lastClickCell.status == _ConstValue.CELL_STATUS.BIRD;

      if (result1.length < 3 && result2.length < 3 && !isCanBomb) {
        //不会发生消除的情况
        this.exchangeCell(lastPos, pos);
        curClickCell.moveToAndBack(lastPos);
        lastClickCell.moveToAndBack(pos);
        this.lastPos = cc.v2(-1, -1);
        return [this.changeModels];
      } else {
        this.lastPos = cc.v2(-1, -1);
        curClickCell.moveTo(lastPos, this.curTime);
        lastClickCell.moveTo(pos, this.curTime);
        var checkPoint = [pos, lastPos];
        this.curTime += _ConstValue.ANITIME.TOUCH_MOVE;
        this.processCrush(checkPoint);
        return [this.changeModels, this.effectsQueue];
      }
    } // 消除

  }, {
    key: "processCrush",
    value: function processCrush(checkPoint) {
      var cycleCount = 0;

      while (checkPoint.length > 0) {
        var bombModels = [];

        if (cycleCount == 0 && checkPoint.length == 2) {
          //特殊消除
          var pos1 = checkPoint[0];
          var pos2 = checkPoint[1];
          var model1 = this.cells[pos1.y][pos1.x];
          var model2 = this.cells[pos2.y][pos2.x];

          if (model1.status == _ConstValue.CELL_STATUS.BIRD || model2.status == _ConstValue.CELL_STATUS.BIRD) {
            var bombModel = null;

            if (model1.status == _ConstValue.CELL_STATUS.BIRD) {
              model1.type = model2.type;
              bombModels.push(model1);
            } else {
              model2.type = model1.type;
              bombModels.push(model2);
            }
          }
        }

        for (var i in checkPoint) {
          var pos = checkPoint[i];

          if (!this.cells[pos.y][pos.x]) {
            continue;
          }

          var _this$checkPoint = this.checkPoint(pos.x, pos.y),
              _this$checkPoint2 = _slicedToArray(_this$checkPoint, 3),
              result = _this$checkPoint2[0],
              newCellStatus = _this$checkPoint2[1],
              newCellType = _this$checkPoint2[2];

          if (result.length < 3) {
            continue;
          }

          for (var j in result) {
            var model = this.cells[result[j].y][result[j].x];
            this.crushCell(result[j].x, result[j].y, false, cycleCount);

            if (model.status != _ConstValue.CELL_STATUS.COMMON) {
              bombModels.push(model);
            }
          }

          this.createNewCell(pos, newCellStatus, newCellType);
        }

        this.processBomb(bombModels, cycleCount);
        this.curTime += _ConstValue.ANITIME.DIE;
        checkPoint = this.down();
        cycleCount++;
      }
    } //生成新cell

  }, {
    key: "createNewCell",
    value: function createNewCell(pos, status, type) {
      if (status == "") {
        return;
      }

      if (status == _ConstValue.CELL_STATUS.BIRD) {
        type = _ConstValue.CELL_TYPE.BIRD;
      }

      var model = new _CellModel["default"]();
      this.cells[pos.y][pos.x] = model;
      model.init(type);
      model.setStartXY(pos.x, pos.y);
      model.setXY(pos.x, pos.y);
      model.setStatus(status);
      model.setVisible(0, false);
      model.setVisible(this.curTime, true);
      this.changeModels.push(model);
    } // 下落

  }, {
    key: "down",
    value: function down() {
      var newCheckPoint = [];

      for (var i = 1; i <= _ConstValue.GRID_WIDTH; i++) {
        for (var j = 1; j <= _ConstValue.GRID_HEIGHT; j++) {
          if (this.cells[i][j] == null) {
            var curRow = i;

            for (var k = curRow; k <= _ConstValue.GRID_HEIGHT; k++) {
              if (this.cells[k][j]) {
                this.pushToChangeModels(this.cells[k][j]);
                newCheckPoint.push(this.cells[k][j]);
                this.cells[curRow][j] = this.cells[k][j];
                this.cells[k][j] = null;
                this.cells[curRow][j].setXY(j, curRow);
                this.cells[curRow][j].moveTo(cc.v2(j, curRow), this.curTime);
                curRow++;
              }
            }

            var count = 1;

            for (var k = curRow; k <= _ConstValue.GRID_HEIGHT; k++) {
              this.cells[k][j] = new _CellModel["default"]();
              this.cells[k][j].init(this.getRandomCellType());
              this.cells[k][j].setStartXY(j, count + _ConstValue.GRID_HEIGHT);
              this.cells[k][j].setXY(j, count + _ConstValue.GRID_HEIGHT);
              this.cells[k][j].moveTo(cc.v2(j, k), this.curTime);
              count++;
              this.changeModels.push(this.cells[k][j]);
              newCheckPoint.push(this.cells[k][j]);
            }
          }
        }
      }

      this.curTime += _ConstValue.ANITIME.TOUCH_MOVE + 0.3;
      return newCheckPoint;
    }
  }, {
    key: "pushToChangeModels",
    value: function pushToChangeModels(model) {
      if (this.changeModels.indexOf(model) != -1) {
        return;
      }

      this.changeModels.push(model);
    }
  }, {
    key: "cleanCmd",
    value: function cleanCmd() {
      for (var i = 1; i <= _ConstValue.GRID_WIDTH; i++) {
        for (var j = 1; j <= _ConstValue.GRID_HEIGHT; j++) {
          if (this.cells[i][j]) {
            this.cells[i][j].cmd = [];
          }
        }
      }
    }
  }, {
    key: "exchangeCell",
    value: function exchangeCell(pos1, pos2) {
      var tmpModel = this.cells[pos1.y][pos1.x];
      this.cells[pos1.y][pos1.x] = this.cells[pos2.y][pos2.x];
      this.cells[pos1.y][pos1.x].x = pos1.x;
      this.cells[pos1.y][pos1.x].y = pos1.y;
      this.cells[pos2.y][pos2.x] = tmpModel;
      this.cells[pos2.y][pos2.x].x = pos2.x;
      this.cells[pos2.y][pos2.x].y = pos2.y;
    } // 设置种类
    // Todo 改成乱序算法

  }, {
    key: "setCellTypeNum",
    value: function setCellTypeNum(num) {
      console.log("num = ", num);
      this.cellTypeNum = num;
      this.cellCreateType = [];
      var createTypeList = this.cellCreateType;

      for (var i = 1; i <= _ConstValue.CELL_BASENUM; i++) {
        createTypeList.push(i);
      }

      for (var _i2 = 0; _i2 < createTypeList.length; _i2++) {
        var index = Math.floor(Math.random() * (_ConstValue.CELL_BASENUM - _i2)) + _i2;

        createTypeList[_i2], createTypeList[index] = createTypeList[index], createTypeList[_i2];
      }
    } // 随要生成一个类型

  }, {
    key: "getRandomCellType",
    value: function getRandomCellType() {
      var index = Math.floor(Math.random() * this.cellTypeNum);
      return this.cellCreateType[index];
    } // TODO bombModels去重

  }, {
    key: "processBomb",
    value: function processBomb(bombModels, cycleCount) {
      var _this = this;

      var _loop = function _loop() {
        var newBombModel = [];
        var bombTime = _ConstValue.ANITIME.BOMB_DELAY;
        bombModels.forEach(function (model) {
          if (model.status == _ConstValue.CELL_STATUS.LINE) {
            for (var i = 1; i <= _ConstValue.GRID_WIDTH; i++) {
              if (this.cells[model.y][i]) {
                if (this.cells[model.y][i].status != _ConstValue.CELL_STATUS.COMMON) {
                  newBombModel.push(this.cells[model.y][i]);
                }

                this.crushCell(i, model.y, false, cycleCount);
              }
            }

            this.addRowBomb(this.curTime, cc.v2(model.x, model.y));
          } else if (model.status == _ConstValue.CELL_STATUS.COLUMN) {
            for (var _i3 = 1; _i3 <= _ConstValue.GRID_HEIGHT; _i3++) {
              if (this.cells[_i3][model.x]) {
                if (this.cells[_i3][model.x].status != _ConstValue.CELL_STATUS.COMMON) {
                  newBombModel.push(this.cells[_i3][model.x]);
                }

                this.crushCell(model.x, _i3, false, cycleCount);
              }
            }

            this.addColBomb(this.curTime, cc.v2(model.x, model.y));
          } else if (model.status == _ConstValue.CELL_STATUS.WRAP) {
            var x = model.x;
            var y = model.y;

            for (var _i4 = 1; _i4 <= _ConstValue.GRID_HEIGHT; _i4++) {
              for (var j = 1; j <= _ConstValue.GRID_WIDTH; j++) {
                var delta = Math.abs(x - j) + Math.abs(y - _i4);

                if (this.cells[_i4][j] && delta <= 2) {
                  if (this.cells[_i4][j].status != _ConstValue.CELL_STATUS.COMMON) {
                    newBombModel.push(this.cells[_i4][j]);
                  }

                  this.crushCell(j, _i4, false, cycleCount);
                }
              }
            }
          } else if (model.status == _ConstValue.CELL_STATUS.BIRD) {
            var crushType = model.type;

            if (bombTime < _ConstValue.ANITIME.BOMB_BIRD_DELAY) {
              bombTime = _ConstValue.ANITIME.BOMB_BIRD_DELAY;
            }

            if (crushType == _ConstValue.CELL_TYPE.BIRD) {
              crushType = this.getRandomCellType();
            }

            for (var _i5 = 1; _i5 <= _ConstValue.GRID_HEIGHT; _i5++) {
              for (var _j = 1; _j <= _ConstValue.GRID_WIDTH; _j++) {
                if (this.cells[_i5][_j] && this.cells[_i5][_j].type == crushType) {
                  if (this.cells[_i5][_j].status != _ConstValue.CELL_STATUS.COMMON) {
                    newBombModel.push(this.cells[_i5][_j]);
                  }

                  this.crushCell(_j, _i5, true, cycleCount);
                }
              }
            } //this.crushCell(model.x, model.y);

          }
        }, _this);

        if (bombModels.length > 0) {
          _this.curTime += bombTime;
        }

        bombModels = newBombModel;
      };

      while (bombModels.length > 0) {
        _loop();
      }
    }
    /**
     * 
     * @param {开始播放的时间} playTime 
     * @param {*cell位置} pos 
     * @param {*第几次消除，用于播放音效} step 
     */

  }, {
    key: "addCrushEffect",
    value: function addCrushEffect(playTime, pos, step) {
      this.effectsQueue.push({
        playTime: playTime,
        pos: pos,
        action: "crush",
        step: step
      });
    }
  }, {
    key: "addRowBomb",
    value: function addRowBomb(playTime, pos) {
      this.effectsQueue.push({
        playTime: playTime,
        pos: pos,
        action: "rowBomb"
      });
    }
  }, {
    key: "addColBomb",
    value: function addColBomb(playTime, pos) {
      this.effectsQueue.push({
        playTime: playTime,
        pos: pos,
        action: "colBomb"
      });
    }
  }, {
    key: "addWrapBomb",
    value: function addWrapBomb(playTime, pos) {} // TODO
    // cell消除逻辑

  }, {
    key: "crushCell",
    value: function crushCell(x, y, needShake, step) {
      var model = this.cells[y][x];
      this.pushToChangeModels(model);

      if (needShake) {
        model.toShake(this.curTime);
      }

      var shakeTime = needShake ? _ConstValue.ANITIME.DIE_SHAKE : 0;
      model.toDie(this.curTime + shakeTime);
      this.addCrushEffect(this.curTime + shakeTime, cc.v2(model.x, model.y), step);
      this.cells[y][x] = null;
    }
  }]);

  return GameModel;
}();

exports["default"] = GameModel;
module.exports = exports["default"];

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Controller/GameController.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '5ac64Iq16lBqrHZ0246FRcZ', 'GameController');
// Script/Controller/GameController.js

"use strict";

var _GameModel = _interopRequireDefault(require("../Model/GameModel"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //    default: null,      // The default value will be used only when the component attaching
    //                           to a node for the first time
    //    url: cc.Texture2D,  // optional, default is typeof default
    //    serializable: true, // optional, default is true
    //    visible: true,      // optional, default is true
    //    displayName: 'Foo', // optional
    //    readonly: false,    // optional, default is false
    // },
    // ...
    grid: {
      "default": null,
      type: cc.Node
    }
  },
  // use this for initialization
  onLoad: function onLoad() {
    this.gameModel = new _GameModel["default"]();
    this.gameModel.init(4);
    var gridScript = this.grid.getComponent("GridView");
    gridScript.setController(this);
    gridScript.initWithCellModels(this.gameModel.getCells());
  },
  selectCell: function selectCell(pos) {
    return this.gameModel.selectCell(pos);
  },
  cleanCmd: function cleanCmd() {
    this.gameModel.cleanCmd();
  } // called every frame, uncomment this function to activate update callback
  // update: function (dt) {
  // }, 

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9TY3JpcHQvQ29udHJvbGxlci9HYW1lQ29udHJvbGxlci5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50IiwicHJvcGVydGllcyIsImdyaWQiLCJ0eXBlIiwiTm9kZSIsIm9uTG9hZCIsImdhbWVNb2RlbCIsIkdhbWVNb2RlbCIsImluaXQiLCJncmlkU2NyaXB0IiwiZ2V0Q29tcG9uZW50Iiwic2V0Q29udHJvbGxlciIsImluaXRXaXRoQ2VsbE1vZGVscyIsImdldENlbGxzIiwic2VsZWN0Q2VsbCIsInBvcyIsImNsZWFuQ21kIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0FBRUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0QsRUFBRSxDQUFDRSxTQURQO0FBR0xDLEVBQUFBLFVBQVUsRUFBRTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FDLElBQUFBLElBQUksRUFBQztBQUNELGlCQUFTLElBRFI7QUFFREMsTUFBQUEsSUFBSSxFQUFFTCxFQUFFLENBQUNNO0FBRlI7QUFYRyxHQUhQO0FBb0JMO0FBQ0FDLEVBQUFBLE1BQU0sRUFBRSxrQkFBWTtBQUNoQixTQUFLQyxTQUFMLEdBQWlCLElBQUlDLHFCQUFKLEVBQWpCO0FBQ0EsU0FBS0QsU0FBTCxDQUFlRSxJQUFmLENBQW9CLENBQXBCO0FBQ0EsUUFBSUMsVUFBVSxHQUFHLEtBQUtQLElBQUwsQ0FBVVEsWUFBVixDQUF1QixVQUF2QixDQUFqQjtBQUNBRCxJQUFBQSxVQUFVLENBQUNFLGFBQVgsQ0FBeUIsSUFBekI7QUFDQUYsSUFBQUEsVUFBVSxDQUFDRyxrQkFBWCxDQUE4QixLQUFLTixTQUFMLENBQWVPLFFBQWYsRUFBOUI7QUFDSCxHQTNCSTtBQTZCTEMsRUFBQUEsVUFBVSxFQUFFLG9CQUFTQyxHQUFULEVBQWE7QUFDckIsV0FBTyxLQUFLVCxTQUFMLENBQWVRLFVBQWYsQ0FBMEJDLEdBQTFCLENBQVA7QUFDSCxHQS9CSTtBQWdDTEMsRUFBQUEsUUFBUSxFQUFFLG9CQUFVO0FBQ2hCLFNBQUtWLFNBQUwsQ0FBZVUsUUFBZjtBQUNILEdBbENJLENBb0NMO0FBQ0E7QUFFQTs7QUF2Q0ssQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEdhbWVNb2RlbCBmcm9tIFwiLi4vTW9kZWwvR2FtZU1vZGVsXCI7XG5cbmNjLkNsYXNzKHtcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIC8vIGZvbzoge1xuICAgICAgICAvLyAgICBkZWZhdWx0OiBudWxsLCAgICAgIC8vIFRoZSBkZWZhdWx0IHZhbHVlIHdpbGwgYmUgdXNlZCBvbmx5IHdoZW4gdGhlIGNvbXBvbmVudCBhdHRhY2hpbmdcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5vZGUgZm9yIHRoZSBmaXJzdCB0aW1lXG4gICAgICAgIC8vICAgIHVybDogY2MuVGV4dHVyZTJELCAgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHlwZW9mIGRlZmF1bHRcbiAgICAgICAgLy8gICAgc2VyaWFsaXphYmxlOiB0cnVlLCAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0cnVlXG4gICAgICAgIC8vICAgIHZpc2libGU6IHRydWUsICAgICAgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHJ1ZVxuICAgICAgICAvLyAgICBkaXNwbGF5TmFtZTogJ0ZvbycsIC8vIG9wdGlvbmFsXG4gICAgICAgIC8vICAgIHJlYWRvbmx5OiBmYWxzZSwgICAgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgZmFsc2VcbiAgICAgICAgLy8gfSxcbiAgICAgICAgLy8gLi4uXG4gICAgICAgIGdyaWQ6e1xuICAgICAgICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICAgICAgICAgIHR5cGU6IGNjLk5vZGVcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyB1c2UgdGhpcyBmb3IgaW5pdGlhbGl6YXRpb25cbiAgICBvbkxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5nYW1lTW9kZWwgPSBuZXcgR2FtZU1vZGVsKCk7XG4gICAgICAgIHRoaXMuZ2FtZU1vZGVsLmluaXQoNCk7XG4gICAgICAgIHZhciBncmlkU2NyaXB0ID0gdGhpcy5ncmlkLmdldENvbXBvbmVudChcIkdyaWRWaWV3XCIpO1xuICAgICAgICBncmlkU2NyaXB0LnNldENvbnRyb2xsZXIodGhpcyk7XG4gICAgICAgIGdyaWRTY3JpcHQuaW5pdFdpdGhDZWxsTW9kZWxzKHRoaXMuZ2FtZU1vZGVsLmdldENlbGxzKCkpO1xuICAgIH0sXG5cbiAgICBzZWxlY3RDZWxsOiBmdW5jdGlvbihwb3Mpe1xuICAgICAgICByZXR1cm4gdGhpcy5nYW1lTW9kZWwuc2VsZWN0Q2VsbChwb3MpO1xuICAgIH0sXG4gICAgY2xlYW5DbWQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMuZ2FtZU1vZGVsLmNsZWFuQ21kKCk7XG4gICAgfVxuXG4gICAgLy8gY2FsbGVkIGV2ZXJ5IGZyYW1lLCB1bmNvbW1lbnQgdGhpcyBmdW5jdGlvbiB0byBhY3RpdmF0ZSB1cGRhdGUgY2FsbGJhY2tcbiAgICAvLyB1cGRhdGU6IGZ1bmN0aW9uIChkdCkge1xuXG4gICAgLy8gfSwgXG59KTtcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Utils/AudioUtils.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'fe151y+R2lFvas76dyah2Uf', 'AudioUtils');
// Script/Utils/AudioUtils.js

"use strict";

// Learn cc.Class:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    swap: {
      type: cc.AudioClip,
      "default": null
    },
    click: {
      type: cc.AudioClip,
      "default": null
    },
    eliminate: {
      type: [cc.AudioClip],
      "default": []
    },
    continuousMatch: {
      type: [cc.AudioClip],
      "default": []
    }
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {},
  start: function start() {},
  playClick: function playClick() {
    cc.audioEngine.play(this.click, false, 1);
  },
  playSwap: function playSwap() {
    cc.audioEngine.play(this.swap, false, 1);
  },
  playEliminate: function playEliminate(step) {
    step = Math.min(this.eliminate.length - 1, step);
    cc.audioEngine.play(this.eliminate[step], false, 1);
  },
  playContinuousMatch: function playContinuousMatch(step) {
    console.log("step = ", step);
    step = Math.min(step, 11);

    if (step < 2) {
      return;
    }

    cc.audioEngine.play(this.continuousMatch[Math.floor(step / 2) - 1], false, 1);
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9TY3JpcHQvVXRpbHMvQXVkaW9VdGlscy5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50IiwicHJvcGVydGllcyIsInN3YXAiLCJ0eXBlIiwiQXVkaW9DbGlwIiwiY2xpY2siLCJlbGltaW5hdGUiLCJjb250aW51b3VzTWF0Y2giLCJvbkxvYWQiLCJzdGFydCIsInBsYXlDbGljayIsImF1ZGlvRW5naW5lIiwicGxheSIsInBsYXlTd2FwIiwicGxheUVsaW1pbmF0ZSIsInN0ZXAiLCJNYXRoIiwibWluIiwibGVuZ3RoIiwicGxheUNvbnRpbnVvdXNNYXRjaCIsImNvbnNvbGUiLCJsb2ciLCJmbG9vciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFHTEMsRUFBQUEsVUFBVSxFQUFFO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FDLElBQUFBLElBQUksRUFBRTtBQUNGQyxNQUFBQSxJQUFJLEVBQUVMLEVBQUUsQ0FBQ00sU0FEUDtBQUVGLGlCQUFTO0FBRlAsS0FoQkU7QUFvQlJDLElBQUFBLEtBQUssRUFBRTtBQUNIRixNQUFBQSxJQUFJLEVBQUVMLEVBQUUsQ0FBQ00sU0FETjtBQUVILGlCQUFTO0FBRk4sS0FwQkM7QUF3QlJFLElBQUFBLFNBQVMsRUFBQztBQUNOSCxNQUFBQSxJQUFJLEVBQUUsQ0FBQ0wsRUFBRSxDQUFDTSxTQUFKLENBREE7QUFFTixpQkFBUztBQUZILEtBeEJGO0FBNEJSRyxJQUFBQSxlQUFlLEVBQUM7QUFDWkosTUFBQUEsSUFBSSxFQUFFLENBQUNMLEVBQUUsQ0FBQ00sU0FBSixDQURNO0FBRVosaUJBQVM7QUFGRztBQTVCUixHQUhQO0FBcUNMO0FBRUFJLEVBQUFBLE1BdkNLLG9CQXVDSyxDQUVULENBekNJO0FBMkNMQyxFQUFBQSxLQTNDSyxtQkEyQ0ksQ0FFUixDQTdDSTtBQThDTEMsRUFBQUEsU0FBUyxFQUFFLHFCQUFVO0FBQ2pCWixJQUFBQSxFQUFFLENBQUNhLFdBQUgsQ0FBZUMsSUFBZixDQUFvQixLQUFLUCxLQUF6QixFQUFnQyxLQUFoQyxFQUF1QyxDQUF2QztBQUNILEdBaERJO0FBaURMUSxFQUFBQSxRQUFRLEVBQUUsb0JBQVU7QUFDaEJmLElBQUFBLEVBQUUsQ0FBQ2EsV0FBSCxDQUFlQyxJQUFmLENBQW9CLEtBQUtWLElBQXpCLEVBQStCLEtBQS9CLEVBQXNDLENBQXRDO0FBQ0gsR0FuREk7QUFvRExZLEVBQUFBLGFBQWEsRUFBRSx1QkFBU0MsSUFBVCxFQUFjO0FBQ3pCQSxJQUFBQSxJQUFJLEdBQUdDLElBQUksQ0FBQ0MsR0FBTCxDQUFTLEtBQUtYLFNBQUwsQ0FBZVksTUFBZixHQUF3QixDQUFqQyxFQUFvQ0gsSUFBcEMsQ0FBUDtBQUNBakIsSUFBQUEsRUFBRSxDQUFDYSxXQUFILENBQWVDLElBQWYsQ0FBb0IsS0FBS04sU0FBTCxDQUFlUyxJQUFmLENBQXBCLEVBQTBDLEtBQTFDLEVBQWlELENBQWpEO0FBQ0gsR0F2REk7QUF3RExJLEVBQUFBLG1CQUFtQixFQUFFLDZCQUFTSixJQUFULEVBQWM7QUFDL0JLLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLFNBQVosRUFBdUJOLElBQXZCO0FBQ0FBLElBQUFBLElBQUksR0FBR0MsSUFBSSxDQUFDQyxHQUFMLENBQVNGLElBQVQsRUFBZSxFQUFmLENBQVA7O0FBQ0EsUUFBR0EsSUFBSSxHQUFHLENBQVYsRUFBWTtBQUNSO0FBQ0g7O0FBQ0RqQixJQUFBQSxFQUFFLENBQUNhLFdBQUgsQ0FBZUMsSUFBZixDQUFvQixLQUFLTCxlQUFMLENBQXFCUyxJQUFJLENBQUNNLEtBQUwsQ0FBV1AsSUFBSSxHQUFDLENBQWhCLElBQXFCLENBQTFDLENBQXBCLEVBQWtFLEtBQWxFLEVBQXlFLENBQXpFO0FBQ0gsR0EvREksQ0FpRUw7O0FBakVLLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExlYXJuIGNjLkNsYXNzOlxuLy8gIC0gW0NoaW5lc2VdIGh0dHA6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC96aC9zY3JpcHRpbmcvY2xhc3MuaHRtbFxuLy8gIC0gW0VuZ2xpc2hdIGh0dHA6Ly93d3cuY29jb3MyZC14Lm9yZy9kb2NzL2NyZWF0b3IvZW4vc2NyaXB0aW5nL2NsYXNzLmh0bWxcbi8vIExlYXJuIEF0dHJpYnV0ZTpcbi8vICAtIFtDaGluZXNlXSBodHRwOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci9tYW51YWwvemgvc2NyaXB0aW5nL3JlZmVyZW5jZS9hdHRyaWJ1dGVzLmh0bWxcbi8vICAtIFtFbmdsaXNoXSBodHRwOi8vd3d3LmNvY29zMmQteC5vcmcvZG9jcy9jcmVhdG9yL2VuL3NjcmlwdGluZy9yZWZlcmVuY2UvYXR0cmlidXRlcy5odG1sXG4vLyBMZWFybiBsaWZlLWN5Y2xlIGNhbGxiYWNrczpcbi8vICAtIFtDaGluZXNlXSBodHRwOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci9tYW51YWwvemgvc2NyaXB0aW5nL2xpZmUtY3ljbGUtY2FsbGJhY2tzLmh0bWxcbi8vICAtIFtFbmdsaXNoXSBodHRwOi8vd3d3LmNvY29zMmQteC5vcmcvZG9jcy9jcmVhdG9yL2VuL3NjcmlwdGluZy9saWZlLWN5Y2xlLWNhbGxiYWNrcy5odG1sXG5cbmNjLkNsYXNzKHtcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIC8vIGZvbzoge1xuICAgICAgICAvLyAgICAgLy8gQVRUUklCVVRFUzpcbiAgICAgICAgLy8gICAgIGRlZmF1bHQ6IG51bGwsICAgICAgICAvLyBUaGUgZGVmYXVsdCB2YWx1ZSB3aWxsIGJlIHVzZWQgb25seSB3aGVuIHRoZSBjb21wb25lbnQgYXR0YWNoaW5nXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gYSBub2RlIGZvciB0aGUgZmlyc3QgdGltZVxuICAgICAgICAvLyAgICAgdHlwZTogY2MuU3ByaXRlRnJhbWUsIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHR5cGVvZiBkZWZhdWx0XG4gICAgICAgIC8vICAgICBzZXJpYWxpemFibGU6IHRydWUsICAgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHJ1ZVxuICAgICAgICAvLyB9LFxuICAgICAgICAvLyBiYXI6IHtcbiAgICAgICAgLy8gICAgIGdldCAoKSB7XG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuIHRoaXMuX2JhcjtcbiAgICAgICAgLy8gICAgIH0sXG4gICAgICAgIC8vICAgICBzZXQgKHZhbHVlKSB7XG4gICAgICAgIC8vICAgICAgICAgdGhpcy5fYmFyID0gdmFsdWU7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH0sXG4gICAgICAgIHN3YXA6IHtcbiAgICAgICAgICAgIHR5cGU6IGNjLkF1ZGlvQ2xpcCxcbiAgICAgICAgICAgIGRlZmF1bHQ6IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgY2xpY2s6IHtcbiAgICAgICAgICAgIHR5cGU6IGNjLkF1ZGlvQ2xpcCxcbiAgICAgICAgICAgIGRlZmF1bHQ6IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgZWxpbWluYXRlOntcbiAgICAgICAgICAgIHR5cGU6IFtjYy5BdWRpb0NsaXBdLFxuICAgICAgICAgICAgZGVmYXVsdDogW10sXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRpbnVvdXNNYXRjaDp7XG4gICAgICAgICAgICB0eXBlOiBbY2MuQXVkaW9DbGlwXSxcbiAgICAgICAgICAgIGRlZmF1bHQ6IFtdXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gTElGRS1DWUNMRSBDQUxMQkFDS1M6XG5cbiAgICBvbkxvYWQgKCkge1xuICAgICAgICBcbiAgICB9LFxuXG4gICAgc3RhcnQgKCkge1xuXG4gICAgfSxcbiAgICBwbGF5Q2xpY2s6IGZ1bmN0aW9uKCl7XG4gICAgICAgIGNjLmF1ZGlvRW5naW5lLnBsYXkodGhpcy5jbGljaywgZmFsc2UsIDEpO1xuICAgIH0sXG4gICAgcGxheVN3YXA6IGZ1bmN0aW9uKCl7XG4gICAgICAgIGNjLmF1ZGlvRW5naW5lLnBsYXkodGhpcy5zd2FwLCBmYWxzZSwgMSk7XG4gICAgfSxcbiAgICBwbGF5RWxpbWluYXRlOiBmdW5jdGlvbihzdGVwKXtcbiAgICAgICAgc3RlcCA9IE1hdGgubWluKHRoaXMuZWxpbWluYXRlLmxlbmd0aCAtIDEsIHN0ZXApO1xuICAgICAgICBjYy5hdWRpb0VuZ2luZS5wbGF5KHRoaXMuZWxpbWluYXRlW3N0ZXBdLCBmYWxzZSwgMSk7XG4gICAgfSxcbiAgICBwbGF5Q29udGludW91c01hdGNoOiBmdW5jdGlvbihzdGVwKXtcbiAgICAgICAgY29uc29sZS5sb2coXCJzdGVwID0gXCIsIHN0ZXApO1xuICAgICAgICBzdGVwID0gTWF0aC5taW4oc3RlcCwgMTEpO1xuICAgICAgICBpZihzdGVwIDwgMil7XG4gICAgICAgICAgICByZXR1cm4gXG4gICAgICAgIH1cbiAgICAgICAgY2MuYXVkaW9FbmdpbmUucGxheSh0aGlzLmNvbnRpbnVvdXNNYXRjaFtNYXRoLmZsb29yKHN0ZXAvMikgLSAxXSwgZmFsc2UsIDEpO1xuICAgIH1cblxuICAgIC8vIHVwZGF0ZSAoZHQpIHt9LFxufSk7XG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/View/CellView.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'fbf19Cx4ptFV62UZ7+qJJpQ', 'CellView');
// Script/View/CellView.js

"use strict";

var _ConstValue = require("../Model/ConstValue");

cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //    default: null,      // The default value will be used only when the component attaching
    //                           to a node for the first time
    //    url: cc.Texture2D,  // optional, default is typeof default
    //    serializable: true, // optional, default is true
    //    visible: true,      // optional, default is true
    //    displayName: 'Foo', // optional
    //    readonly: false,    // optional, default is false
    // },
    // ...
    defaultFrame: {
      "default": null,
      type: cc.SpriteFrame
    }
  },
  // use this for initialization
  onLoad: function onLoad() {
    //this.model = null;
    this.isSelect = false;
  },
  initWithModel: function initWithModel(model) {
    this.model = model;
    var x = model.startX;
    var y = model.startY;
    this.node.x = _ConstValue.CELL_WIDTH * (x - 0.5);
    this.node.y = _ConstValue.CELL_HEIGHT * (y - 0.5);
    var animation = this.node.getComponent(cc.Animation);

    if (model.status == _ConstValue.CELL_STATUS.COMMON) {
      animation.stop();
    } else {
      animation.play(model.status);
    }
  },
  // 执行移动动作
  updateView: function updateView() {
    var _this = this;

    var cmd = this.model.cmd;

    if (cmd.length <= 0) {
      return;
    }

    var actionArray = [];
    var curTime = 0;

    for (var i in cmd) {
      if (cmd[i].playTime > curTime) {
        var delay = cc.delayTime(cmd[i].playTime - curTime);
        actionArray.push(delay);
      }

      if (cmd[i].action == "moveTo") {
        var x = (cmd[i].pos.x - 0.5) * _ConstValue.CELL_WIDTH;
        var y = (cmd[i].pos.y - 0.5) * _ConstValue.CELL_HEIGHT;
        var move = cc.moveTo(_ConstValue.ANITIME.TOUCH_MOVE, cc.v2(x, y));
        actionArray.push(move);
      } else if (cmd[i].action == "toDie") {
        if (this.status == _ConstValue.CELL_STATUS.BIRD) {
          var animation = this.node.getComponent(cc.Animation);
          animation.play("effect");
          actionArray.push(cc.delayTime(_ConstValue.ANITIME.BOMB_BIRD_DELAY));
        }

        var callFunc = cc.callFunc(function () {
          this.node.destroy();
        }, this);
        actionArray.push(callFunc);
      } else if (cmd[i].action == "setVisible") {
        (function () {
          var isVisible = cmd[i].isVisible;
          actionArray.push(cc.callFunc(function () {
            if (isVisible) {
              this.node.opacity = 255;
            } else {
              this.node.opacity = 0;
            }
          }, _this));
        })();
      } else if (cmd[i].action == "toShake") {
        var rotateRight = cc.rotateBy(0.06, 30);
        var rotateLeft = cc.rotateBy(0.12, -60);
        actionArray.push(cc.repeat(cc.sequence(rotateRight, rotateLeft, rotateRight), 2));
      }

      curTime = cmd[i].playTime + cmd[i].keepTime;
    }
    /**
     * 智障的引擎设计，一群SB
     */


    if (actionArray.length == 1) {
      this.node.runAction(actionArray[0]);
    } else {
      var _cc;

      this.node.runAction((_cc = cc).sequence.apply(_cc, actionArray));
    }
  },
  // called every frame, uncomment this function to activate update callback
  // update: function (dt) {
  // },
  setSelect: function setSelect(flag) {
    var animation = this.node.getComponent(cc.Animation);
    var bg = this.node.getChildByName("select");

    if (flag == false && this.isSelect && this.model.status == _ConstValue.CELL_STATUS.COMMON) {
      animation.stop();
      this.node.getComponent(cc.Sprite).spriteFrame = this.defaultFrame;
    } else if (flag && this.model.status == _ConstValue.CELL_STATUS.COMMON) {
      animation.play(_ConstValue.CELL_STATUS.CLICK);
    } else if (flag && this.model.status == _ConstValue.CELL_STATUS.BIRD) {
      animation.play(_ConstValue.CELL_STATUS.CLICK);
    }

    bg.active = flag;
    this.isSelect = flag;
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Model/ConstValue.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'f9088esGbNBtJmNaJsz0Gq4', 'ConstValue');
// Script/Model/ConstValue.js

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ANITIME = exports.GRID_PIXEL_HEIGHT = exports.GRID_PIXEL_WIDTH = exports.CELL_HEIGHT = exports.CELL_WIDTH = exports.GRID_HEIGHT = exports.GRID_WIDTH = exports.CELL_STATUS = exports.CELL_BASENUM = exports.CELL_TYPE = void 0;
var CELL_TYPE = {
  EMPTY: 0,
  A: 1,
  B: 2,
  C: 3,
  D: 4,
  E: 5,
  F: 6,
  BIRD: 7
};
exports.CELL_TYPE = CELL_TYPE;
var CELL_BASENUM = 6;
exports.CELL_BASENUM = CELL_BASENUM;
var CELL_STATUS = {
  COMMON: 0,
  CLICK: "click",
  LINE: "line",
  COLUMN: "column",
  WRAP: "wrap",
  BIRD: "bird"
};
exports.CELL_STATUS = CELL_STATUS;
var GRID_WIDTH = 9;
exports.GRID_WIDTH = GRID_WIDTH;
var GRID_HEIGHT = 9;
exports.GRID_HEIGHT = GRID_HEIGHT;
var CELL_WIDTH = 70;
exports.CELL_WIDTH = CELL_WIDTH;
var CELL_HEIGHT = 70;
exports.CELL_HEIGHT = CELL_HEIGHT;
var GRID_PIXEL_WIDTH = GRID_WIDTH * CELL_WIDTH;
exports.GRID_PIXEL_WIDTH = GRID_PIXEL_WIDTH;
var GRID_PIXEL_HEIGHT = GRID_HEIGHT * CELL_HEIGHT; // ********************   时间表  animation time **************************

exports.GRID_PIXEL_HEIGHT = GRID_PIXEL_HEIGHT;
var ANITIME = {
  TOUCH_MOVE: 0.3,
  DIE: 0.2,
  DOWN: 0.5,
  BOMB_DELAY: 0.3,
  BOMB_BIRD_DELAY: 0.7,
  DIE_SHAKE: 0.4 // 死前抖动

};
exports.ANITIME = ANITIME;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9TY3JpcHQvTW9kZWwvQ29uc3RWYWx1ZS5qcyJdLCJuYW1lcyI6WyJDRUxMX1RZUEUiLCJFTVBUWSIsIkEiLCJCIiwiQyIsIkQiLCJFIiwiRiIsIkJJUkQiLCJDRUxMX0JBU0VOVU0iLCJDRUxMX1NUQVRVUyIsIkNPTU1PTiIsIkNMSUNLIiwiTElORSIsIkNPTFVNTiIsIldSQVAiLCJHUklEX1dJRFRIIiwiR1JJRF9IRUlHSFQiLCJDRUxMX1dJRFRIIiwiQ0VMTF9IRUlHSFQiLCJHUklEX1BJWEVMX1dJRFRIIiwiR1JJRF9QSVhFTF9IRUlHSFQiLCJBTklUSU1FIiwiVE9VQ0hfTU9WRSIsIkRJRSIsIkRPV04iLCJCT01CX0RFTEFZIiwiQk9NQl9CSVJEX0RFTEFZIiwiRElFX1NIQUtFIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDTyxJQUFNQSxTQUFTLEdBQUc7QUFDckJDLEVBQUFBLEtBQUssRUFBRyxDQURhO0FBRXJCQyxFQUFBQSxDQUFDLEVBQUcsQ0FGaUI7QUFHckJDLEVBQUFBLENBQUMsRUFBRyxDQUhpQjtBQUlyQkMsRUFBQUEsQ0FBQyxFQUFHLENBSmlCO0FBS3JCQyxFQUFBQSxDQUFDLEVBQUcsQ0FMaUI7QUFNckJDLEVBQUFBLENBQUMsRUFBRyxDQU5pQjtBQU9yQkMsRUFBQUEsQ0FBQyxFQUFHLENBUGlCO0FBUXJCQyxFQUFBQSxJQUFJLEVBQUc7QUFSYyxDQUFsQjs7QUFVQSxJQUFNQyxZQUFZLEdBQUcsQ0FBckI7O0FBQ0EsSUFBTUMsV0FBVyxHQUFHO0FBQ3ZCQyxFQUFBQSxNQUFNLEVBQUUsQ0FEZTtBQUV2QkMsRUFBQUEsS0FBSyxFQUFFLE9BRmdCO0FBR3ZCQyxFQUFBQSxJQUFJLEVBQUUsTUFIaUI7QUFJdkJDLEVBQUFBLE1BQU0sRUFBRSxRQUplO0FBS3ZCQyxFQUFBQSxJQUFJLEVBQUUsTUFMaUI7QUFNdkJQLEVBQUFBLElBQUksRUFBRTtBQU5pQixDQUFwQjs7QUFTQSxJQUFNUSxVQUFVLEdBQUcsQ0FBbkI7O0FBQ0EsSUFBTUMsV0FBVyxHQUFHLENBQXBCOztBQUVBLElBQU1DLFVBQVUsR0FBRyxFQUFuQjs7QUFDQSxJQUFNQyxXQUFXLEdBQUcsRUFBcEI7O0FBRUEsSUFBTUMsZ0JBQWdCLEdBQUdKLFVBQVUsR0FBR0UsVUFBdEM7O0FBQ0EsSUFBTUcsaUJBQWlCLEdBQUdKLFdBQVcsR0FBR0UsV0FBeEMsRUFHUDs7O0FBQ08sSUFBTUcsT0FBTyxHQUFHO0FBQ25CQyxFQUFBQSxVQUFVLEVBQUUsR0FETztBQUVuQkMsRUFBQUEsR0FBRyxFQUFFLEdBRmM7QUFHbkJDLEVBQUFBLElBQUksRUFBRSxHQUhhO0FBSW5CQyxFQUFBQSxVQUFVLEVBQUUsR0FKTztBQUtuQkMsRUFBQUEsZUFBZSxFQUFFLEdBTEU7QUFNbkJDLEVBQUFBLFNBQVMsRUFBRSxHQU5RLENBTUo7O0FBTkksQ0FBaEIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IGNvbnN0IENFTExfVFlQRSA9IHtcbiAgICBFTVBUWSA6IDAsXG4gICAgQSA6IDEsXG4gICAgQiA6IDIsXG4gICAgQyA6IDMsXG4gICAgRCA6IDQsXG4gICAgRSA6IDUsXG4gICAgRiA6IDYsXG4gICAgQklSRCA6IDdcbn1cbmV4cG9ydCBjb25zdCBDRUxMX0JBU0VOVU0gPSA2O1xuZXhwb3J0IGNvbnN0IENFTExfU1RBVFVTID0ge1xuICAgIENPTU1PTjogMCAsXG4gICAgQ0xJQ0s6IFwiY2xpY2tcIixcbiAgICBMSU5FOiBcImxpbmVcIixcbiAgICBDT0xVTU46IFwiY29sdW1uXCIsXG4gICAgV1JBUDogXCJ3cmFwXCIsXG4gICAgQklSRDogXCJiaXJkXCJcbn0gXG5cbmV4cG9ydCBjb25zdCBHUklEX1dJRFRIID0gOTtcbmV4cG9ydCBjb25zdCBHUklEX0hFSUdIVCA9IDk7XG5cbmV4cG9ydCBjb25zdCBDRUxMX1dJRFRIID0gNzA7XG5leHBvcnQgY29uc3QgQ0VMTF9IRUlHSFQgPSA3MDtcblxuZXhwb3J0IGNvbnN0IEdSSURfUElYRUxfV0lEVEggPSBHUklEX1dJRFRIICogQ0VMTF9XSURUSDtcbmV4cG9ydCBjb25zdCBHUklEX1BJWEVMX0hFSUdIVCA9IEdSSURfSEVJR0hUICogQ0VMTF9IRUlHSFQ7XG5cblxuLy8gKioqKioqKioqKioqKioqKioqKiogICDml7bpl7TooaggIGFuaW1hdGlvbiB0aW1lICoqKioqKioqKioqKioqKioqKioqKioqKioqXG5leHBvcnQgY29uc3QgQU5JVElNRSA9IHtcbiAgICBUT1VDSF9NT1ZFOiAwLjMsXG4gICAgRElFOiAwLjIsXG4gICAgRE9XTjogMC41LFxuICAgIEJPTUJfREVMQVk6IDAuMyxcbiAgICBCT01CX0JJUkRfREVMQVk6IDAuNyxcbiAgICBESUVfU0hBS0U6IDAuNCAvLyDmrbvliY3mipbliqhcbn1cblxuXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Model/CellModel.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'dae88GCevBMaK7lQqhume8G', 'CellModel');
// Script/Model/CellModel.js

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ConstValue = require("./ConstValue");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var CellModel = /*#__PURE__*/function () {
  function CellModel() {
    _classCallCheck(this, CellModel);

    this.type = null;
    this.status = _ConstValue.CELL_STATUS.COMMON;
    this.x = 1;
    this.y = 1;
    this.startX = 1;
    this.startY = 1;
    this.cmd = [];
    this.isDeath = false;
    this.objecCount = Math.floor(Math.random() * 1000);
  }

  _createClass(CellModel, [{
    key: "init",
    value: function init(type) {
      this.type = type;
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return this.type == _ConstValue.CELL_TYPE.EMPTY;
    }
  }, {
    key: "setEmpty",
    value: function setEmpty() {
      this.type = _ConstValue.CELL_TYPE.EMPTY;
    }
  }, {
    key: "setXY",
    value: function setXY(x, y) {
      this.x = x;
      this.y = y;
    }
  }, {
    key: "setStartXY",
    value: function setStartXY(x, y) {
      this.startX = x;
      this.startY = y;
    }
  }, {
    key: "setStatus",
    value: function setStatus(status) {
      this.status = status;
    }
  }, {
    key: "moveToAndBack",
    value: function moveToAndBack(pos) {
      var srcPos = cc.v2(this.x, this.y);
      this.cmd.push({
        action: "moveTo",
        keepTime: _ConstValue.ANITIME.TOUCH_MOVE,
        playTime: 0,
        pos: pos
      });
      this.cmd.push({
        action: "moveTo",
        keepTime: _ConstValue.ANITIME.TOUCH_MOVE,
        playTime: _ConstValue.ANITIME.TOUCH_MOVE,
        pos: srcPos
      });
    }
  }, {
    key: "moveTo",
    value: function moveTo(pos, playTime) {
      var srcPos = cc.v2(this.x, this.y);
      this.cmd.push({
        action: "moveTo",
        keepTime: _ConstValue.ANITIME.TOUCH_MOVE,
        playTime: playTime,
        pos: pos
      });
      this.x = pos.x;
      this.y = pos.y;
    }
  }, {
    key: "toDie",
    value: function toDie(playTime) {
      this.cmd.push({
        action: "toDie",
        playTime: playTime,
        keepTime: _ConstValue.ANITIME.DIE
      });
      this.isDeath = true;
    }
  }, {
    key: "toShake",
    value: function toShake(playTime) {
      this.cmd.push({
        action: "toShake",
        playTime: playTime,
        keepTime: _ConstValue.ANITIME.DIE_SHAKE
      });
    }
  }, {
    key: "setVisible",
    value: function setVisible(playTime, isVisible) {
      this.cmd.push({
        action: "setVisible",
        playTime: playTime,
        keepTime: 0,
        isVisible: isVisible
      });
    }
  }, {
    key: "moveToAndDie",
    value: function moveToAndDie(pos) {}
  }, {
    key: "isBird",
    value: function isBird() {
      return this.type == _ConstValue.CELL_TYPE.G;
    }
  }]);

  return CellModel;
}();

exports["default"] = CellModel;
module.exports = exports["default"];

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9TY3JpcHQvTW9kZWwvQ2VsbE1vZGVsLmpzIl0sIm5hbWVzIjpbIkNlbGxNb2RlbCIsInR5cGUiLCJzdGF0dXMiLCJDRUxMX1NUQVRVUyIsIkNPTU1PTiIsIngiLCJ5Iiwic3RhcnRYIiwic3RhcnRZIiwiY21kIiwiaXNEZWF0aCIsIm9iamVjQ291bnQiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJDRUxMX1RZUEUiLCJFTVBUWSIsInBvcyIsInNyY1BvcyIsImNjIiwidjIiLCJwdXNoIiwiYWN0aW9uIiwia2VlcFRpbWUiLCJBTklUSU1FIiwiVE9VQ0hfTU9WRSIsInBsYXlUaW1lIiwiRElFIiwiRElFX1NIQUtFIiwiaXNWaXNpYmxlIiwiRyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7OztJQUNxQkE7QUFDakIsdUJBQWM7QUFBQTs7QUFDVixTQUFLQyxJQUFMLEdBQVksSUFBWjtBQUNBLFNBQUtDLE1BQUwsR0FBY0Msd0JBQVlDLE1BQTFCO0FBQ0EsU0FBS0MsQ0FBTCxHQUFTLENBQVQ7QUFDQSxTQUFLQyxDQUFMLEdBQVMsQ0FBVDtBQUNBLFNBQUtDLE1BQUwsR0FBYyxDQUFkO0FBQ0EsU0FBS0MsTUFBTCxHQUFjLENBQWQ7QUFDQSxTQUFLQyxHQUFMLEdBQVcsRUFBWDtBQUNBLFNBQUtDLE9BQUwsR0FBZSxLQUFmO0FBQ0EsU0FBS0MsVUFBTCxHQUFrQkMsSUFBSSxDQUFDQyxLQUFMLENBQVdELElBQUksQ0FBQ0UsTUFBTCxLQUFnQixJQUEzQixDQUFsQjtBQUNIOzs7O3lCQUVJYixNQUFNO0FBQ1AsV0FBS0EsSUFBTCxHQUFZQSxJQUFaO0FBQ0g7Ozs4QkFFUztBQUNOLGFBQU8sS0FBS0EsSUFBTCxJQUFhYyxzQkFBVUMsS0FBOUI7QUFDSDs7OytCQUVVO0FBQ1AsV0FBS2YsSUFBTCxHQUFZYyxzQkFBVUMsS0FBdEI7QUFDSDs7OzBCQUNLWCxHQUFHQyxHQUFHO0FBQ1IsV0FBS0QsQ0FBTCxHQUFTQSxDQUFUO0FBQ0EsV0FBS0MsQ0FBTCxHQUFTQSxDQUFUO0FBQ0g7OzsrQkFFVUQsR0FBR0MsR0FBRztBQUNiLFdBQUtDLE1BQUwsR0FBY0YsQ0FBZDtBQUNBLFdBQUtHLE1BQUwsR0FBY0YsQ0FBZDtBQUNIOzs7OEJBRVNKLFFBQVE7QUFDZCxXQUFLQSxNQUFMLEdBQWNBLE1BQWQ7QUFDSDs7O2tDQUVhZSxLQUFLO0FBQ2YsVUFBSUMsTUFBTSxHQUFHQyxFQUFFLENBQUNDLEVBQUgsQ0FBTSxLQUFLZixDQUFYLEVBQWMsS0FBS0MsQ0FBbkIsQ0FBYjtBQUNBLFdBQUtHLEdBQUwsQ0FBU1ksSUFBVCxDQUFjO0FBQ1ZDLFFBQUFBLE1BQU0sRUFBRSxRQURFO0FBRVZDLFFBQUFBLFFBQVEsRUFBRUMsb0JBQVFDLFVBRlI7QUFHVkMsUUFBQUEsUUFBUSxFQUFFLENBSEE7QUFJVlQsUUFBQUEsR0FBRyxFQUFFQTtBQUpLLE9BQWQ7QUFNQSxXQUFLUixHQUFMLENBQVNZLElBQVQsQ0FBYztBQUNWQyxRQUFBQSxNQUFNLEVBQUUsUUFERTtBQUVWQyxRQUFBQSxRQUFRLEVBQUVDLG9CQUFRQyxVQUZSO0FBR1ZDLFFBQUFBLFFBQVEsRUFBRUYsb0JBQVFDLFVBSFI7QUFJVlIsUUFBQUEsR0FBRyxFQUFFQztBQUpLLE9BQWQ7QUFNSDs7OzJCQUVNRCxLQUFLUyxVQUFVO0FBQ2xCLFVBQUlSLE1BQU0sR0FBR0MsRUFBRSxDQUFDQyxFQUFILENBQU0sS0FBS2YsQ0FBWCxFQUFjLEtBQUtDLENBQW5CLENBQWI7QUFDQSxXQUFLRyxHQUFMLENBQVNZLElBQVQsQ0FBYztBQUNWQyxRQUFBQSxNQUFNLEVBQUUsUUFERTtBQUVWQyxRQUFBQSxRQUFRLEVBQUVDLG9CQUFRQyxVQUZSO0FBR1ZDLFFBQUFBLFFBQVEsRUFBRUEsUUFIQTtBQUlWVCxRQUFBQSxHQUFHLEVBQUVBO0FBSkssT0FBZDtBQU1BLFdBQUtaLENBQUwsR0FBU1ksR0FBRyxDQUFDWixDQUFiO0FBQ0EsV0FBS0MsQ0FBTCxHQUFTVyxHQUFHLENBQUNYLENBQWI7QUFDSDs7OzBCQUVLb0IsVUFBVTtBQUNaLFdBQUtqQixHQUFMLENBQVNZLElBQVQsQ0FBYztBQUNWQyxRQUFBQSxNQUFNLEVBQUUsT0FERTtBQUVWSSxRQUFBQSxRQUFRLEVBQUVBLFFBRkE7QUFHVkgsUUFBQUEsUUFBUSxFQUFFQyxvQkFBUUc7QUFIUixPQUFkO0FBS0EsV0FBS2pCLE9BQUwsR0FBZSxJQUFmO0FBQ0g7Ozs0QkFFT2dCLFVBQVU7QUFDZCxXQUFLakIsR0FBTCxDQUFTWSxJQUFULENBQWM7QUFDVkMsUUFBQUEsTUFBTSxFQUFFLFNBREU7QUFFVkksUUFBQUEsUUFBUSxFQUFFQSxRQUZBO0FBR1ZILFFBQUFBLFFBQVEsRUFBRUMsb0JBQVFJO0FBSFIsT0FBZDtBQUtIOzs7K0JBRVVGLFVBQVVHLFdBQVc7QUFDNUIsV0FBS3BCLEdBQUwsQ0FBU1ksSUFBVCxDQUFjO0FBQ1ZDLFFBQUFBLE1BQU0sRUFBRSxZQURFO0FBRVZJLFFBQUFBLFFBQVEsRUFBRUEsUUFGQTtBQUdWSCxRQUFBQSxRQUFRLEVBQUUsQ0FIQTtBQUlWTSxRQUFBQSxTQUFTLEVBQUVBO0FBSkQsT0FBZDtBQU1IOzs7aUNBRVlaLEtBQUssQ0FFakI7Ozs2QkFFUTtBQUNMLGFBQU8sS0FBS2hCLElBQUwsSUFBYWMsc0JBQVVlLENBQTlCO0FBQ0giLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENFTExfVFlQRSwgQU5JVElNRSwgQ0VMTF9TVEFUVVMsIEdSSURfSEVJR0hUIH0gZnJvbSBcIi4vQ29uc3RWYWx1ZVwiO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2VsbE1vZGVsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy50eXBlID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdGF0dXMgPSBDRUxMX1NUQVRVUy5DT01NT047XG4gICAgICAgIHRoaXMueCA9IDE7XG4gICAgICAgIHRoaXMueSA9IDE7XG4gICAgICAgIHRoaXMuc3RhcnRYID0gMTtcbiAgICAgICAgdGhpcy5zdGFydFkgPSAxO1xuICAgICAgICB0aGlzLmNtZCA9IFtdO1xuICAgICAgICB0aGlzLmlzRGVhdGggPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vYmplY0NvdW50ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMCk7XG4gICAgfVxuXG4gICAgaW5pdCh0eXBlKSB7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgfVxuXG4gICAgaXNFbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZSA9PSBDRUxMX1RZUEUuRU1QVFk7XG4gICAgfVxuXG4gICAgc2V0RW1wdHkoKSB7XG4gICAgICAgIHRoaXMudHlwZSA9IENFTExfVFlQRS5FTVBUWTtcbiAgICB9XG4gICAgc2V0WFkoeCwgeSkge1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgIH1cblxuICAgIHNldFN0YXJ0WFkoeCwgeSkge1xuICAgICAgICB0aGlzLnN0YXJ0WCA9IHg7XG4gICAgICAgIHRoaXMuc3RhcnRZID0geTtcbiAgICB9XG5cbiAgICBzZXRTdGF0dXMoc3RhdHVzKSB7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xuICAgIH1cblxuICAgIG1vdmVUb0FuZEJhY2socG9zKSB7XG4gICAgICAgIHZhciBzcmNQb3MgPSBjYy52Mih0aGlzLngsIHRoaXMueSk7XG4gICAgICAgIHRoaXMuY21kLnB1c2goe1xuICAgICAgICAgICAgYWN0aW9uOiBcIm1vdmVUb1wiLFxuICAgICAgICAgICAga2VlcFRpbWU6IEFOSVRJTUUuVE9VQ0hfTU9WRSxcbiAgICAgICAgICAgIHBsYXlUaW1lOiAwLFxuICAgICAgICAgICAgcG9zOiBwb3NcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY21kLnB1c2goe1xuICAgICAgICAgICAgYWN0aW9uOiBcIm1vdmVUb1wiLFxuICAgICAgICAgICAga2VlcFRpbWU6IEFOSVRJTUUuVE9VQ0hfTU9WRSxcbiAgICAgICAgICAgIHBsYXlUaW1lOiBBTklUSU1FLlRPVUNIX01PVkUsXG4gICAgICAgICAgICBwb3M6IHNyY1Bvc1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBtb3ZlVG8ocG9zLCBwbGF5VGltZSkge1xuICAgICAgICB2YXIgc3JjUG9zID0gY2MudjIodGhpcy54LCB0aGlzLnkpOyBcbiAgICAgICAgdGhpcy5jbWQucHVzaCh7XG4gICAgICAgICAgICBhY3Rpb246IFwibW92ZVRvXCIsXG4gICAgICAgICAgICBrZWVwVGltZTogQU5JVElNRS5UT1VDSF9NT1ZFLFxuICAgICAgICAgICAgcGxheVRpbWU6IHBsYXlUaW1lLFxuICAgICAgICAgICAgcG9zOiBwb3NcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMueCA9IHBvcy54O1xuICAgICAgICB0aGlzLnkgPSBwb3MueTtcbiAgICB9XG5cbiAgICB0b0RpZShwbGF5VGltZSkge1xuICAgICAgICB0aGlzLmNtZC5wdXNoKHtcbiAgICAgICAgICAgIGFjdGlvbjogXCJ0b0RpZVwiLFxuICAgICAgICAgICAgcGxheVRpbWU6IHBsYXlUaW1lLFxuICAgICAgICAgICAga2VlcFRpbWU6IEFOSVRJTUUuRElFXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmlzRGVhdGggPSB0cnVlO1xuICAgIH1cblxuICAgIHRvU2hha2UocGxheVRpbWUpIHtcbiAgICAgICAgdGhpcy5jbWQucHVzaCh7XG4gICAgICAgICAgICBhY3Rpb246IFwidG9TaGFrZVwiLFxuICAgICAgICAgICAgcGxheVRpbWU6IHBsYXlUaW1lLFxuICAgICAgICAgICAga2VlcFRpbWU6IEFOSVRJTUUuRElFX1NIQUtFXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNldFZpc2libGUocGxheVRpbWUsIGlzVmlzaWJsZSkge1xuICAgICAgICB0aGlzLmNtZC5wdXNoKHtcbiAgICAgICAgICAgIGFjdGlvbjogXCJzZXRWaXNpYmxlXCIsXG4gICAgICAgICAgICBwbGF5VGltZTogcGxheVRpbWUsXG4gICAgICAgICAgICBrZWVwVGltZTogMCxcbiAgICAgICAgICAgIGlzVmlzaWJsZTogaXNWaXNpYmxlXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG1vdmVUb0FuZERpZShwb3MpIHtcblxuICAgIH1cblxuICAgIGlzQmlyZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZSA9PSBDRUxMX1RZUEUuRztcbiAgICB9XG5cbn1cbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/UnitTest/GameModelTest.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '16fce9lOkpA7a2vuhmMkDMZ', 'GameModelTest');
// Script/UnitTest/GameModelTest.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {// foo: {
    //    default: null,      // The default value will be used only when the component attaching
    //                           to a node for the first time
    //    url: cc.Texture2D,  // optional, default is typeof default
    //    serializable: true, // optional, default is true
    //    visible: true,      // optional, default is true
    //    displayName: 'Foo', // optional
    //    readonly: false,    // optional, default is false
    // },
    // ...
  } // use this for initialization
  // onLoad: function () {
  //     var gameModel = new GameModel();
  //     gameModel.init();
  //     gameModel.printInfo();
  //     for(var i = 1;i<=9;i++){
  //         for(var j = 1;j<=9;j++){
  //             console.log(gameModel.checkPoint(i,j).join(" ,"));
  //         }
  //     }
  // },
  // called every frame, uncomment this function to activate update callback
  // update: function (dt) {
  // },

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9TY3JpcHQvVW5pdFRlc3QvR2FtZU1vZGVsVGVzdC5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50IiwicHJvcGVydGllcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFHTEMsRUFBQUEsVUFBVSxFQUFFLENBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFWUSxHQUhQLENBZ0JMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7O0FBL0JLLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNjLkNsYXNzKHtcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIC8vIGZvbzoge1xuICAgICAgICAvLyAgICBkZWZhdWx0OiBudWxsLCAgICAgIC8vIFRoZSBkZWZhdWx0IHZhbHVlIHdpbGwgYmUgdXNlZCBvbmx5IHdoZW4gdGhlIGNvbXBvbmVudCBhdHRhY2hpbmdcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5vZGUgZm9yIHRoZSBmaXJzdCB0aW1lXG4gICAgICAgIC8vICAgIHVybDogY2MuVGV4dHVyZTJELCAgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHlwZW9mIGRlZmF1bHRcbiAgICAgICAgLy8gICAgc2VyaWFsaXphYmxlOiB0cnVlLCAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0cnVlXG4gICAgICAgIC8vICAgIHZpc2libGU6IHRydWUsICAgICAgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHJ1ZVxuICAgICAgICAvLyAgICBkaXNwbGF5TmFtZTogJ0ZvbycsIC8vIG9wdGlvbmFsXG4gICAgICAgIC8vICAgIHJlYWRvbmx5OiBmYWxzZSwgICAgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgZmFsc2VcbiAgICAgICAgLy8gfSxcbiAgICAgICAgLy8gLi4uXG4gICAgfSxcblxuICAgIC8vIHVzZSB0aGlzIGZvciBpbml0aWFsaXphdGlvblxuICAgIC8vIG9uTG9hZDogZnVuY3Rpb24gKCkge1xuICAgIC8vICAgICB2YXIgZ2FtZU1vZGVsID0gbmV3IEdhbWVNb2RlbCgpO1xuICAgIC8vICAgICBnYW1lTW9kZWwuaW5pdCgpO1xuICAgIC8vICAgICBnYW1lTW9kZWwucHJpbnRJbmZvKCk7XG4gICAgLy8gICAgIGZvcih2YXIgaSA9IDE7aTw9OTtpKyspe1xuICAgIC8vICAgICAgICAgZm9yKHZhciBqID0gMTtqPD05O2orKyl7XG4gICAgLy8gICAgICAgICAgICAgY29uc29sZS5sb2coZ2FtZU1vZGVsLmNoZWNrUG9pbnQoaSxqKS5qb2luKFwiICxcIikpO1xuICAgIC8vICAgICAgICAgfVxuICAgIC8vICAgICB9XG4gICAgLy8gfSxcblxuICAgIC8vIGNhbGxlZCBldmVyeSBmcmFtZSwgdW5jb21tZW50IHRoaXMgZnVuY3Rpb24gdG8gYWN0aXZhdGUgdXBkYXRlIGNhbGxiYWNrXG4gICAgLy8gdXBkYXRlOiBmdW5jdGlvbiAoZHQpIHtcblxuICAgIC8vIH0sXG59KTtcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/View/EffectLayer.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '0e925myn0dIjqdao1TpipF9', 'EffectLayer');
// Script/View/EffectLayer.js

"use strict";

var _ConstValue = require("../Model/ConstValue");

var _AudioUtils = _interopRequireDefault(require("../Utils/AudioUtils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //    default: null,      // The default value will be used only when the component attaching
    //                           to a node for the first time
    //    url: cc.Texture2D,  // optional, default is typeof default
    //    serializable: true, // optional, default is true
    //    visible: true,      // optional, default is true
    //    displayName: 'Foo', // optional
    //    readonly: false,    // optional, default is false
    // },
    // ...
    bombWhite: {
      "default": null,
      type: cc.Prefab
    },
    crushEffect: {
      "default": null,
      type: cc.Prefab
    },
    audioUtils: {
      type: _AudioUtils["default"],
      "default": null
    }
  },
  // use this for initialization
  onLoad: function onLoad() {},
  playEffects: function playEffects(effectQueue) {
    if (!effectQueue || effectQueue.length <= 0) {
      return;
    }

    var soundMap = {}; //某一时刻，某一种声音是否播放过的标记，防止重复播放

    effectQueue.forEach(function (cmd) {
      var delayTime = cc.delayTime(cmd.playTime);
      var callFunc = cc.callFunc(function () {
        var instantEffect = null;
        var animation = null;

        if (cmd.action == "crush") {
          instantEffect = cc.instantiate(this.crushEffect);
          animation = instantEffect.getComponent(cc.Animation);
          animation.play("effect");
          !soundMap["crush" + cmd.playTime] && this.audioUtils.playEliminate(cmd.step);
          soundMap["crush" + cmd.playTime] = true;
        } else if (cmd.action == "rowBomb") {
          instantEffect = cc.instantiate(this.bombWhite);
          animation = instantEffect.getComponent(cc.Animation);
          animation.play("effect_line");
        } else if (cmd.action == "colBomb") {
          instantEffect = cc.instantiate(this.bombWhite);
          animation = instantEffect.getComponent(cc.Animation);
          animation.play("effect_col");
        }

        instantEffect.x = _ConstValue.CELL_WIDTH * (cmd.pos.x - 0.5);
        instantEffect.y = _ConstValue.CELL_WIDTH * (cmd.pos.y - 0.5);
        instantEffect.parent = this.node;
        animation.on("finished", function () {
          instantEffect.destroy();
        }, this);
      }, this);
      this.node.runAction(cc.sequence(delayTime, callFunc));
    }, this);
  } // called every frame, uncomment this function to activate update callback
  // update: function (dt) {
  // },

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9TY3JpcHQvVmlldy9FZmZlY3RMYXllci5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50IiwicHJvcGVydGllcyIsImJvbWJXaGl0ZSIsInR5cGUiLCJQcmVmYWIiLCJjcnVzaEVmZmVjdCIsImF1ZGlvVXRpbHMiLCJBdWRpb1V0aWxzIiwib25Mb2FkIiwicGxheUVmZmVjdHMiLCJlZmZlY3RRdWV1ZSIsImxlbmd0aCIsInNvdW5kTWFwIiwiZm9yRWFjaCIsImNtZCIsImRlbGF5VGltZSIsInBsYXlUaW1lIiwiY2FsbEZ1bmMiLCJpbnN0YW50RWZmZWN0IiwiYW5pbWF0aW9uIiwiYWN0aW9uIiwiaW5zdGFudGlhdGUiLCJnZXRDb21wb25lbnQiLCJBbmltYXRpb24iLCJwbGF5IiwicGxheUVsaW1pbmF0ZSIsInN0ZXAiLCJ4IiwiQ0VMTF9XSURUSCIsInBvcyIsInkiLCJwYXJlbnQiLCJub2RlIiwib24iLCJkZXN0cm95IiwicnVuQWN0aW9uIiwic2VxdWVuY2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUE7Ozs7QUFDQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFHTEMsRUFBQUEsVUFBVSxFQUFFO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUMsSUFBQUEsU0FBUyxFQUFDO0FBQ04saUJBQVMsSUFESDtBQUVOQyxNQUFBQSxJQUFJLEVBQUVMLEVBQUUsQ0FBQ007QUFGSCxLQVhGO0FBZVJDLElBQUFBLFdBQVcsRUFBQztBQUNSLGlCQUFTLElBREQ7QUFFUkYsTUFBQUEsSUFBSSxFQUFFTCxFQUFFLENBQUNNO0FBRkQsS0FmSjtBQW1CUkUsSUFBQUEsVUFBVSxFQUFDO0FBQ1BILE1BQUFBLElBQUksRUFBRUksc0JBREM7QUFFUCxpQkFBUztBQUZGO0FBbkJILEdBSFA7QUE0Qkw7QUFDQUMsRUFBQUEsTUFBTSxFQUFFLGtCQUFZLENBRW5CLENBL0JJO0FBZ0NMQyxFQUFBQSxXQUFXLEVBQUUscUJBQVNDLFdBQVQsRUFBcUI7QUFDOUIsUUFBRyxDQUFDQSxXQUFELElBQWdCQSxXQUFXLENBQUNDLE1BQVosSUFBc0IsQ0FBekMsRUFBMkM7QUFDdkM7QUFDSDs7QUFDRCxRQUFJQyxRQUFRLEdBQUcsRUFBZixDQUo4QixDQUlYOztBQUNuQkYsSUFBQUEsV0FBVyxDQUFDRyxPQUFaLENBQW9CLFVBQVNDLEdBQVQsRUFBYTtBQUM3QixVQUFJQyxTQUFTLEdBQUdqQixFQUFFLENBQUNpQixTQUFILENBQWFELEdBQUcsQ0FBQ0UsUUFBakIsQ0FBaEI7QUFDQSxVQUFJQyxRQUFRLEdBQUduQixFQUFFLENBQUNtQixRQUFILENBQVksWUFBVTtBQUNqQyxZQUFJQyxhQUFhLEdBQUcsSUFBcEI7QUFDQSxZQUFJQyxTQUFTLEdBQUcsSUFBaEI7O0FBQ0EsWUFBR0wsR0FBRyxDQUFDTSxNQUFKLElBQWMsT0FBakIsRUFBeUI7QUFDckJGLFVBQUFBLGFBQWEsR0FBR3BCLEVBQUUsQ0FBQ3VCLFdBQUgsQ0FBZSxLQUFLaEIsV0FBcEIsQ0FBaEI7QUFDQWMsVUFBQUEsU0FBUyxHQUFJRCxhQUFhLENBQUNJLFlBQWQsQ0FBMkJ4QixFQUFFLENBQUN5QixTQUE5QixDQUFiO0FBQ0FKLFVBQUFBLFNBQVMsQ0FBQ0ssSUFBVixDQUFlLFFBQWY7QUFDQSxXQUFDWixRQUFRLENBQUMsVUFBVUUsR0FBRyxDQUFDRSxRQUFmLENBQVQsSUFBcUMsS0FBS1YsVUFBTCxDQUFnQm1CLGFBQWhCLENBQThCWCxHQUFHLENBQUNZLElBQWxDLENBQXJDO0FBQ0FkLFVBQUFBLFFBQVEsQ0FBQyxVQUFVRSxHQUFHLENBQUNFLFFBQWYsQ0FBUixHQUFtQyxJQUFuQztBQUNILFNBTkQsTUFPSyxJQUFHRixHQUFHLENBQUNNLE1BQUosSUFBYyxTQUFqQixFQUEyQjtBQUM1QkYsVUFBQUEsYUFBYSxHQUFHcEIsRUFBRSxDQUFDdUIsV0FBSCxDQUFlLEtBQUtuQixTQUFwQixDQUFoQjtBQUNBaUIsVUFBQUEsU0FBUyxHQUFJRCxhQUFhLENBQUNJLFlBQWQsQ0FBMkJ4QixFQUFFLENBQUN5QixTQUE5QixDQUFiO0FBQ0FKLFVBQUFBLFNBQVMsQ0FBQ0ssSUFBVixDQUFlLGFBQWY7QUFDSCxTQUpJLE1BS0EsSUFBR1YsR0FBRyxDQUFDTSxNQUFKLElBQWMsU0FBakIsRUFBMkI7QUFDNUJGLFVBQUFBLGFBQWEsR0FBR3BCLEVBQUUsQ0FBQ3VCLFdBQUgsQ0FBZSxLQUFLbkIsU0FBcEIsQ0FBaEI7QUFDQWlCLFVBQUFBLFNBQVMsR0FBSUQsYUFBYSxDQUFDSSxZQUFkLENBQTJCeEIsRUFBRSxDQUFDeUIsU0FBOUIsQ0FBYjtBQUNBSixVQUFBQSxTQUFTLENBQUNLLElBQVYsQ0FBZSxZQUFmO0FBQ0g7O0FBRUROLFFBQUFBLGFBQWEsQ0FBQ1MsQ0FBZCxHQUFrQkMsMEJBQWNkLEdBQUcsQ0FBQ2UsR0FBSixDQUFRRixDQUFSLEdBQVksR0FBMUIsQ0FBbEI7QUFDQVQsUUFBQUEsYUFBYSxDQUFDWSxDQUFkLEdBQWtCRiwwQkFBY2QsR0FBRyxDQUFDZSxHQUFKLENBQVFDLENBQVIsR0FBWSxHQUExQixDQUFsQjtBQUNBWixRQUFBQSxhQUFhLENBQUNhLE1BQWQsR0FBdUIsS0FBS0MsSUFBNUI7QUFDQWIsUUFBQUEsU0FBUyxDQUFDYyxFQUFWLENBQWEsVUFBYixFQUF3QixZQUFVO0FBQzlCZixVQUFBQSxhQUFhLENBQUNnQixPQUFkO0FBQ0gsU0FGRCxFQUVFLElBRkY7QUFJSCxPQTVCYyxFQTRCYixJQTVCYSxDQUFmO0FBNkJBLFdBQUtGLElBQUwsQ0FBVUcsU0FBVixDQUFvQnJDLEVBQUUsQ0FBQ3NDLFFBQUgsQ0FBWXJCLFNBQVosRUFBdUJFLFFBQXZCLENBQXBCO0FBQ0gsS0FoQ0QsRUFnQ0UsSUFoQ0Y7QUFpQ0gsR0F0RUksQ0F3RUw7QUFDQTtBQUVBOztBQTNFSyxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NFTExfV0lEVEh9IGZyb20gJy4uL01vZGVsL0NvbnN0VmFsdWUnO1xuXG5pbXBvcnQgQXVkaW9VdGlscyBmcm9tIFwiLi4vVXRpbHMvQXVkaW9VdGlsc1wiO1xuY2MuQ2xhc3Moe1xuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcblxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgLy8gZm9vOiB7XG4gICAgICAgIC8vICAgIGRlZmF1bHQ6IG51bGwsICAgICAgLy8gVGhlIGRlZmF1bHQgdmFsdWUgd2lsbCBiZSB1c2VkIG9ubHkgd2hlbiB0aGUgY29tcG9uZW50IGF0dGFjaGluZ1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbm9kZSBmb3IgdGhlIGZpcnN0IHRpbWVcbiAgICAgICAgLy8gICAgdXJsOiBjYy5UZXh0dXJlMkQsICAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0eXBlb2YgZGVmYXVsdFxuICAgICAgICAvLyAgICBzZXJpYWxpemFibGU6IHRydWUsIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHRydWVcbiAgICAgICAgLy8gICAgdmlzaWJsZTogdHJ1ZSwgICAgICAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0cnVlXG4gICAgICAgIC8vICAgIGRpc3BsYXlOYW1lOiAnRm9vJywgLy8gb3B0aW9uYWxcbiAgICAgICAgLy8gICAgcmVhZG9ubHk6IGZhbHNlLCAgICAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyBmYWxzZVxuICAgICAgICAvLyB9LFxuICAgICAgICAvLyAuLi5cbiAgICAgICAgYm9tYldoaXRlOntcbiAgICAgICAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICAgICAgICB0eXBlOiBjYy5QcmVmYWJcbiAgICAgICAgfSxcbiAgICAgICAgY3J1c2hFZmZlY3Q6e1xuICAgICAgICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICAgICAgICAgIHR5cGU6IGNjLlByZWZhYlxuICAgICAgICB9LFxuICAgICAgICBhdWRpb1V0aWxzOntcbiAgICAgICAgICAgIHR5cGU6IEF1ZGlvVXRpbHMsXG4gICAgICAgICAgICBkZWZhdWx0OiBudWxsXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gdXNlIHRoaXMgZm9yIGluaXRpYWxpemF0aW9uXG4gICAgb25Mb2FkOiBmdW5jdGlvbiAoKSB7XG5cbiAgICB9LFxuICAgIHBsYXlFZmZlY3RzOiBmdW5jdGlvbihlZmZlY3RRdWV1ZSl7XG4gICAgICAgIGlmKCFlZmZlY3RRdWV1ZSB8fCBlZmZlY3RRdWV1ZS5sZW5ndGggPD0gMCl7XG4gICAgICAgICAgICByZXR1cm4gO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzb3VuZE1hcCA9IHt9OyAvL+afkOS4gOaXtuWIu++8jOafkOS4gOenjeWjsOmfs+aYr+WQpuaSreaUvui/h+eahOagh+iusO+8jOmYsuatoumHjeWkjeaSreaUvlxuICAgICAgICBlZmZlY3RRdWV1ZS5mb3JFYWNoKGZ1bmN0aW9uKGNtZCl7XG4gICAgICAgICAgICBsZXQgZGVsYXlUaW1lID0gY2MuZGVsYXlUaW1lKGNtZC5wbGF5VGltZSk7XG4gICAgICAgICAgICBsZXQgY2FsbEZ1bmMgPSBjYy5jYWxsRnVuYyhmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIGxldCBpbnN0YW50RWZmZWN0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBsZXQgYW5pbWF0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZihjbWQuYWN0aW9uID09IFwiY3J1c2hcIil7XG4gICAgICAgICAgICAgICAgICAgIGluc3RhbnRFZmZlY3QgPSBjYy5pbnN0YW50aWF0ZSh0aGlzLmNydXNoRWZmZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uICA9IGluc3RhbnRFZmZlY3QuZ2V0Q29tcG9uZW50KGNjLkFuaW1hdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5wbGF5KFwiZWZmZWN0XCIpO1xuICAgICAgICAgICAgICAgICAgICAhc291bmRNYXBbXCJjcnVzaFwiICsgY21kLnBsYXlUaW1lXSAmJiB0aGlzLmF1ZGlvVXRpbHMucGxheUVsaW1pbmF0ZShjbWQuc3RlcCk7XG4gICAgICAgICAgICAgICAgICAgIHNvdW5kTWFwW1wiY3J1c2hcIiArIGNtZC5wbGF5VGltZV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmKGNtZC5hY3Rpb24gPT0gXCJyb3dCb21iXCIpe1xuICAgICAgICAgICAgICAgICAgICBpbnN0YW50RWZmZWN0ID0gY2MuaW5zdGFudGlhdGUodGhpcy5ib21iV2hpdGUpO1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24gID0gaW5zdGFudEVmZmVjdC5nZXRDb21wb25lbnQoY2MuQW5pbWF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLnBsYXkoXCJlZmZlY3RfbGluZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZihjbWQuYWN0aW9uID09IFwiY29sQm9tYlwiKXtcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFudEVmZmVjdCA9IGNjLmluc3RhbnRpYXRlKHRoaXMuYm9tYldoaXRlKTtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uICA9IGluc3RhbnRFZmZlY3QuZ2V0Q29tcG9uZW50KGNjLkFuaW1hdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5wbGF5KFwiZWZmZWN0X2NvbFwiKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpbnN0YW50RWZmZWN0LnggPSBDRUxMX1dJRFRIICogKGNtZC5wb3MueCAtIDAuNSk7XG4gICAgICAgICAgICAgICAgaW5zdGFudEVmZmVjdC55ID0gQ0VMTF9XSURUSCAqIChjbWQucG9zLnkgLSAwLjUpO1xuICAgICAgICAgICAgICAgIGluc3RhbnRFZmZlY3QucGFyZW50ID0gdGhpcy5ub2RlO1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5vbihcImZpbmlzaGVkXCIsZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFudEVmZmVjdC5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgfSx0aGlzKTtcbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSx0aGlzKTtcbiAgICAgICAgICAgIHRoaXMubm9kZS5ydW5BY3Rpb24oY2Muc2VxdWVuY2UoZGVsYXlUaW1lLCBjYWxsRnVuYykpO1xuICAgICAgICB9LHRoaXMpO1xuICAgIH0sXG5cbiAgICAvLyBjYWxsZWQgZXZlcnkgZnJhbWUsIHVuY29tbWVudCB0aGlzIGZ1bmN0aW9uIHRvIGFjdGl2YXRlIHVwZGF0ZSBjYWxsYmFja1xuICAgIC8vIHVwZGF0ZTogZnVuY3Rpb24gKGR0KSB7XG5cbiAgICAvLyB9LFxufSk7XG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/View/GridView.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'd0d1fDj9rlDx5QUtP+2toQV', 'GridView');
// Script/View/GridView.js

"use strict";

var _ConstValue = require("../Model/ConstValue");

var _AudioUtils = _interopRequireDefault(require("../Utils/AudioUtils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //    default: null,      // The default value will be used only when the component attaching
    //                           to a node for the first time
    //    url: cc.Texture2D,  // optional, default is typeof default
    //    serializable: true, // optional, default is true
    //    visible: true,      // optional, default is true
    //    displayName: 'Foo', // optional
    //    readonly: false,    // optional, default is false
    // },
    // ...
    aniPre: {
      "default": [],
      type: [cc.Prefab]
    },
    effectLayer: {
      "default": null,
      type: cc.Node
    },
    audioUtils: {
      type: _AudioUtils["default"],
      "default": null
    }
  },
  // use this for initialization
  onLoad: function onLoad() {
    this.setListener();
    this.lastTouchPos = cc.Vec2(-1, -1);
    this.isCanMove = true;
    this.isInPlayAni = false; // 是否在播放中
  },
  setController: function setController(controller) {
    this.controller = controller;
  },
  initWithCellModels: function initWithCellModels(cellsModels) {
    this.cellViews = [];

    for (var i = 1; i <= 9; i++) {
      this.cellViews[i] = [];

      for (var j = 1; j <= 9; j++) {
        var type = cellsModels[i][j].type;
        var aniView = cc.instantiate(this.aniPre[type]);
        aniView.parent = this.node;
        var cellViewScript = aniView.getComponent("CellView");
        cellViewScript.initWithModel(cellsModels[i][j]);
        this.cellViews[i][j] = aniView;
      }
    }
  },
  setListener: function setListener() {
    this.node.on(cc.Node.EventType.TOUCH_START, function (eventTouch) {
      if (this.isInPlayAni) {
        //播放动画中，不允许点击
        return true;
      }

      var touchPos = eventTouch.getLocation();
      var cellPos = this.convertTouchPosToCell(touchPos);

      if (cellPos) {
        var changeModels = this.selectCell(cellPos);
        this.isCanMove = changeModels.length < 3;
      } else {
        this.isCanMove = false;
      }

      return true;
    }, this); // 滑动操作逻辑

    this.node.on(cc.Node.EventType.TOUCH_MOVE, function (eventTouch) {
      if (this.isCanMove) {
        var startTouchPos = eventTouch.getStartLocation();
        var startCellPos = this.convertTouchPosToCell(startTouchPos);
        var touchPos = eventTouch.getLocation();
        var cellPos = this.convertTouchPosToCell(touchPos);

        if (startCellPos.x != cellPos.x || startCellPos.y != cellPos.y) {
          this.isCanMove = false;
          var changeModels = this.selectCell(cellPos);
        }
      }
    }, this);
    this.node.on(cc.Node.EventType.TOUCH_END, function (eventTouch) {// console.log("1111");
    }, this);
    this.node.on(cc.Node.EventType.TOUCH_CANCEL, function (eventTouch) {// console.log("1111");
    }, this);
  },
  // 根据点击的像素位置，转换成网格中的位置
  convertTouchPosToCell: function convertTouchPosToCell(pos) {
    pos = this.node.convertToNodeSpace(pos);

    if (pos.x < 0 || pos.x >= _ConstValue.GRID_PIXEL_WIDTH || pos.y < 0 || pos.y >= _ConstValue.GRID_PIXEL_HEIGHT) {
      return false;
    }

    var x = Math.floor(pos.x / _ConstValue.CELL_WIDTH) + 1;
    var y = Math.floor(pos.y / _ConstValue.CELL_HEIGHT) + 1;
    return cc.v2(x, y);
  },
  // 移动格子
  updateView: function updateView(changeModels) {
    var newCellViewInfo = [];

    for (var i in changeModels) {
      var model = changeModels[i];
      var viewInfo = this.findViewByModel(model);
      var view = null; // 如果原来的cell不存在，则新建

      if (!viewInfo) {
        var type = model.type;
        var aniView = cc.instantiate(this.aniPre[type]);
        aniView.parent = this.node;
        var cellViewScript = aniView.getComponent("CellView");
        cellViewScript.initWithModel(model);
        view = aniView;
      } // 如果已经存在
      else {
          view = viewInfo.view;
          this.cellViews[viewInfo.y][viewInfo.x] = null;
        }

      var cellScript = view.getComponent("CellView");
      cellScript.updateView(); // 执行移动动作

      if (!model.isDeath) {
        newCellViewInfo.push({
          model: model,
          view: view
        });
      }
    } // 重新标记this.cellviews的信息


    newCellViewInfo.forEach(function (ele) {
      var model = ele.model;
      this.cellViews[model.y][model.x] = ele.view;
    }, this);
  },
  // 显示选中的格子背景
  updateSelect: function updateSelect(pos) {
    for (var i = 1; i <= 9; i++) {
      for (var j = 1; j <= 9; j++) {
        if (this.cellViews[i][j]) {
          var cellScript = this.cellViews[i][j].getComponent("CellView");

          if (pos.x == j && pos.y == i) {
            cellScript.setSelect(true);
          } else {
            cellScript.setSelect(false);
          }
        }
      }
    }
  },

  /**
   * 根据cell的model返回对应的view
   */
  findViewByModel: function findViewByModel(model) {
    for (var i = 1; i <= 9; i++) {
      for (var j = 1; j <= 9; j++) {
        if (this.cellViews[i][j] && this.cellViews[i][j].getComponent("CellView").model == model) {
          return {
            view: this.cellViews[i][j],
            x: j,
            y: i
          };
        }
      }
    }

    return null;
  },
  getPlayAniTime: function getPlayAniTime(changeModels) {
    if (!changeModels) {
      return 0;
    }

    var maxTime = 0;
    changeModels.forEach(function (ele) {
      ele.cmd.forEach(function (cmd) {
        if (maxTime < cmd.playTime + cmd.keepTime) {
          maxTime = cmd.playTime + cmd.keepTime;
        }
      }, this);
    }, this);
    return maxTime;
  },
  // 获得爆炸次数， 同一个时间算一个
  getStep: function getStep(effectsQueue) {
    if (!effectsQueue) {
      return 0;
    }

    return effectsQueue.reduce(function (maxValue, efffectCmd) {
      return Math.max(maxValue, efffectCmd.step || 0);
    }, 0);
  },
  //一段时间内禁止操作
  disableTouch: function disableTouch(time, step) {
    if (time <= 0) {
      return;
    }

    this.isInPlayAni = true;
    this.node.runAction(cc.sequence(cc.delayTime(time), cc.callFunc(function () {
      this.isInPlayAni = false;
      this.audioUtils.playContinuousMatch(step);
    }, this)));
  },
  // 正常击中格子后的操作
  selectCell: function selectCell(cellPos) {
    var result = this.controller.selectCell(cellPos); // 直接先丢给model处理数据逻辑

    var changeModels = result[0]; // 有改变的cell，包含新生成的cell和生成马上摧毁的格子

    var effectsQueue = result[1]; //各种特效

    this.playEffect(effectsQueue);
    this.disableTouch(this.getPlayAniTime(changeModels), this.getStep(effectsQueue));
    this.updateView(changeModels);
    this.controller.cleanCmd();

    if (changeModels.length >= 2) {
      this.updateSelect(cc.v2(-1, -1));
      this.audioUtils.playSwap();
    } else {
      this.updateSelect(cellPos);
      this.audioUtils.playClick();
    }

    return changeModels;
  },
  playEffect: function playEffect(effectsQueue) {
    this.effectLayer.getComponent("EffectLayer").playEffects(effectsQueue);
  } // called every frame, uncomment this function to activate update callback
  // update: function (dt) {
  // },

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Controller/LoginController.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '5f4845Bus5AQoZakK7KAXht', 'LoginController');
// Script/Controller/LoginController.js

"use strict";

var _AudioUtils = _interopRequireDefault(require("../Utils/AudioUtils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// Learn cc.Class:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    loadingBar: {
      type: cc.ProgressBar,
      "default": null
    },
    loginButton: {
      type: cc.Button,
      "default": null
    },
    worldSceneBGM: {
      type: cc.AudioClip,
      "default": null
    }
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    this.gameSceneBGMAudioId = cc.audioEngine.play(this.worldSceneBGM, true, 1);
  },
  start: function start() {},
  onLogin: function onLogin() {
    this.loadingBar.node.active = true;
    this.loginButton.node.active = false;
    this.loadingBar.progress = 0;
    var backup = cc.loader.onProgress;

    cc.loader.onProgress = function (count, amount) {
      this.loadingBar.progress = count / amount;
    }.bind(this);

    cc.director.preloadScene("Game", function () {
      cc.loader.onProgress = backup;
      this.loadingBar.node.active = false;
      this.loginButton.node.active = true;
      cc.director.loadScene("Game");
    }.bind(this));
  },
  onDestroy: function onDestroy() {
    cc.audioEngine.stop(this.gameSceneBGMAudioId);
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9TY3JpcHQvQ29udHJvbGxlci9Mb2dpbkNvbnRyb2xsZXIuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJsb2FkaW5nQmFyIiwidHlwZSIsIlByb2dyZXNzQmFyIiwibG9naW5CdXR0b24iLCJCdXR0b24iLCJ3b3JsZFNjZW5lQkdNIiwiQXVkaW9DbGlwIiwib25Mb2FkIiwiZ2FtZVNjZW5lQkdNQXVkaW9JZCIsImF1ZGlvRW5naW5lIiwicGxheSIsInN0YXJ0Iiwib25Mb2dpbiIsIm5vZGUiLCJhY3RpdmUiLCJwcm9ncmVzcyIsImJhY2t1cCIsImxvYWRlciIsIm9uUHJvZ3Jlc3MiLCJjb3VudCIsImFtb3VudCIsImJpbmQiLCJkaXJlY3RvciIsInByZWxvYWRTY2VuZSIsImxvYWRTY2VuZSIsIm9uRGVzdHJveSIsInN0b3AiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBVUE7Ozs7QUFWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFHTEMsRUFBQUEsVUFBVSxFQUFFO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FDLElBQUFBLFVBQVUsRUFBRTtBQUNSQyxNQUFBQSxJQUFJLEVBQUVMLEVBQUUsQ0FBQ00sV0FERDtBQUVSLGlCQUFTO0FBRkQsS0FoQko7QUFvQlJDLElBQUFBLFdBQVcsRUFBRTtBQUNURixNQUFBQSxJQUFJLEVBQUVMLEVBQUUsQ0FBQ1EsTUFEQTtBQUVULGlCQUFTO0FBRkEsS0FwQkw7QUF3QlJDLElBQUFBLGFBQWEsRUFBQztBQUNWSixNQUFBQSxJQUFJLEVBQUVMLEVBQUUsQ0FBQ1UsU0FEQztBQUVWLGlCQUFTO0FBRkM7QUF4Qk4sR0FIUDtBQWlDTDtBQUVBQyxFQUFBQSxNQW5DSyxvQkFtQ0s7QUFDTixTQUFLQyxtQkFBTCxHQUEyQlosRUFBRSxDQUFDYSxXQUFILENBQWVDLElBQWYsQ0FBb0IsS0FBS0wsYUFBekIsRUFBd0MsSUFBeEMsRUFBOEMsQ0FBOUMsQ0FBM0I7QUFDSCxHQXJDSTtBQXVDTE0sRUFBQUEsS0F2Q0ssbUJBdUNJLENBRVIsQ0F6Q0k7QUEyQ0xDLEVBQUFBLE9BQU8sRUFBRSxtQkFBVTtBQUNmLFNBQUtaLFVBQUwsQ0FBZ0JhLElBQWhCLENBQXFCQyxNQUFyQixHQUE4QixJQUE5QjtBQUNBLFNBQUtYLFdBQUwsQ0FBaUJVLElBQWpCLENBQXNCQyxNQUF0QixHQUErQixLQUEvQjtBQUNBLFNBQUtkLFVBQUwsQ0FBZ0JlLFFBQWhCLEdBQTJCLENBQTNCO0FBQ0EsUUFBSUMsTUFBTSxHQUFHcEIsRUFBRSxDQUFDcUIsTUFBSCxDQUFVQyxVQUF2Qjs7QUFDQXRCLElBQUFBLEVBQUUsQ0FBQ3FCLE1BQUgsQ0FBVUMsVUFBVixHQUF1QixVQUFVQyxLQUFWLEVBQWlCQyxNQUFqQixFQUF5QjtBQUM1QyxXQUFLcEIsVUFBTCxDQUFnQmUsUUFBaEIsR0FBMkJJLEtBQUssR0FBR0MsTUFBbkM7QUFDSCxLQUZzQixDQUVyQkMsSUFGcUIsQ0FFaEIsSUFGZ0IsQ0FBdkI7O0FBSUF6QixJQUFBQSxFQUFFLENBQUMwQixRQUFILENBQVlDLFlBQVosQ0FBeUIsTUFBekIsRUFBaUMsWUFBWTtBQUN6QzNCLE1BQUFBLEVBQUUsQ0FBQ3FCLE1BQUgsQ0FBVUMsVUFBVixHQUF1QkYsTUFBdkI7QUFDQSxXQUFLaEIsVUFBTCxDQUFnQmEsSUFBaEIsQ0FBcUJDLE1BQXJCLEdBQThCLEtBQTlCO0FBQ0EsV0FBS1gsV0FBTCxDQUFpQlUsSUFBakIsQ0FBc0JDLE1BQXRCLEdBQStCLElBQS9CO0FBQ0FsQixNQUFBQSxFQUFFLENBQUMwQixRQUFILENBQVlFLFNBQVosQ0FBc0IsTUFBdEI7QUFDSCxLQUxnQyxDQUsvQkgsSUFMK0IsQ0FLMUIsSUFMMEIsQ0FBakM7QUFNSCxHQTFESTtBQTRETEksRUFBQUEsU0FBUyxFQUFFLHFCQUFVO0FBQ2pCN0IsSUFBQUEsRUFBRSxDQUFDYSxXQUFILENBQWVpQixJQUFmLENBQW9CLEtBQUtsQixtQkFBekI7QUFDSCxHQTlESSxDQWdFTDs7QUFoRUssQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGVhcm4gY2MuQ2xhc3M6XG4vLyAgLSBbQ2hpbmVzZV0gaHR0cDovL2RvY3MuY29jb3MuY29tL2NyZWF0b3IvbWFudWFsL3poL3NjcmlwdGluZy9jbGFzcy5odG1sXG4vLyAgLSBbRW5nbGlzaF0gaHR0cDovL3d3dy5jb2NvczJkLXgub3JnL2RvY3MvY3JlYXRvci9lbi9zY3JpcHRpbmcvY2xhc3MuaHRtbFxuLy8gTGVhcm4gQXR0cmlidXRlOlxuLy8gIC0gW0NoaW5lc2VdIGh0dHA6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC96aC9zY3JpcHRpbmcvcmVmZXJlbmNlL2F0dHJpYnV0ZXMuaHRtbFxuLy8gIC0gW0VuZ2xpc2hdIGh0dHA6Ly93d3cuY29jb3MyZC14Lm9yZy9kb2NzL2NyZWF0b3IvZW4vc2NyaXB0aW5nL3JlZmVyZW5jZS9hdHRyaWJ1dGVzLmh0bWxcbi8vIExlYXJuIGxpZmUtY3ljbGUgY2FsbGJhY2tzOlxuLy8gIC0gW0NoaW5lc2VdIGh0dHA6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC96aC9zY3JpcHRpbmcvbGlmZS1jeWNsZS1jYWxsYmFja3MuaHRtbFxuLy8gIC0gW0VuZ2xpc2hdIGh0dHA6Ly93d3cuY29jb3MyZC14Lm9yZy9kb2NzL2NyZWF0b3IvZW4vc2NyaXB0aW5nL2xpZmUtY3ljbGUtY2FsbGJhY2tzLmh0bWxcblxuaW1wb3J0IEF1ZGlvVXRpbHMgZnJvbSBcIi4uL1V0aWxzL0F1ZGlvVXRpbHNcIjtcblxuY2MuQ2xhc3Moe1xuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcblxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgLy8gZm9vOiB7XG4gICAgICAgIC8vICAgICAvLyBBVFRSSUJVVEVTOlxuICAgICAgICAvLyAgICAgZGVmYXVsdDogbnVsbCwgICAgICAgIC8vIFRoZSBkZWZhdWx0IHZhbHVlIHdpbGwgYmUgdXNlZCBvbmx5IHdoZW4gdGhlIGNvbXBvbmVudCBhdHRhY2hpbmdcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0byBhIG5vZGUgZm9yIHRoZSBmaXJzdCB0aW1lXG4gICAgICAgIC8vICAgICB0eXBlOiBjYy5TcHJpdGVGcmFtZSwgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHlwZW9mIGRlZmF1bHRcbiAgICAgICAgLy8gICAgIHNlcmlhbGl6YWJsZTogdHJ1ZSwgICAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0cnVlXG4gICAgICAgIC8vIH0sXG4gICAgICAgIC8vIGJhcjoge1xuICAgICAgICAvLyAgICAgZ2V0ICgpIHtcbiAgICAgICAgLy8gICAgICAgICByZXR1cm4gdGhpcy5fYmFyO1xuICAgICAgICAvLyAgICAgfSxcbiAgICAgICAgLy8gICAgIHNldCAodmFsdWUpIHtcbiAgICAgICAgLy8gICAgICAgICB0aGlzLl9iYXIgPSB2YWx1ZTtcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfSxcbiAgICAgICAgbG9hZGluZ0Jhcjoge1xuICAgICAgICAgICAgdHlwZTogY2MuUHJvZ3Jlc3NCYXIsXG4gICAgICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICB9LFxuICAgICAgICBsb2dpbkJ1dHRvbjoge1xuICAgICAgICAgICAgdHlwZTogY2MuQnV0dG9uLFxuICAgICAgICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICAgICAgfSxcbiAgICAgICAgd29ybGRTY2VuZUJHTTp7XG4gICAgICAgICAgICB0eXBlOiBjYy5BdWRpb0NsaXAsXG4gICAgICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8vIExJRkUtQ1lDTEUgQ0FMTEJBQ0tTOlxuXG4gICAgb25Mb2FkICgpIHtcbiAgICAgICAgdGhpcy5nYW1lU2NlbmVCR01BdWRpb0lkID0gY2MuYXVkaW9FbmdpbmUucGxheSh0aGlzLndvcmxkU2NlbmVCR00sIHRydWUsIDEpO1xuICAgIH0sXG5cbiAgICBzdGFydCAoKSB7XG5cbiAgICB9LFxuXG4gICAgb25Mb2dpbjogZnVuY3Rpb24oKXtcbiAgICAgICAgdGhpcy5sb2FkaW5nQmFyLm5vZGUuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5sb2dpbkJ1dHRvbi5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxvYWRpbmdCYXIucHJvZ3Jlc3MgPSAwO1xuICAgICAgICBsZXQgYmFja3VwID0gY2MubG9hZGVyLm9uUHJvZ3Jlc3M7XG4gICAgICAgIGNjLmxvYWRlci5vblByb2dyZXNzID0gZnVuY3Rpb24gKGNvdW50LCBhbW91bnQpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZGluZ0Jhci5wcm9ncmVzcyA9IGNvdW50IC8gYW1vdW50O1xuICAgICAgICB9LmJpbmQodGhpcyk7XG5cbiAgICAgICAgY2MuZGlyZWN0b3IucHJlbG9hZFNjZW5lKFwiR2FtZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjYy5sb2FkZXIub25Qcm9ncmVzcyA9IGJhY2t1cDtcbiAgICAgICAgICAgIHRoaXMubG9hZGluZ0Jhci5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5sb2dpbkJ1dHRvbi5ub2RlLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICBjYy5kaXJlY3Rvci5sb2FkU2NlbmUoXCJHYW1lXCIpO1xuICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgIH0sXG5cbiAgICBvbkRlc3Ryb3k6IGZ1bmN0aW9uKCl7XG4gICAgICAgIGNjLmF1ZGlvRW5naW5lLnN0b3AodGhpcy5nYW1lU2NlbmVCR01BdWRpb0lkKTtcbiAgICB9XG5cbiAgICAvLyB1cGRhdGUgKGR0KSB7fSxcbn0pO1xuIl19
//------QC-SOURCE-SPLIT------
